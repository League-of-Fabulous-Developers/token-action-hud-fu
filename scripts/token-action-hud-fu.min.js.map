{"version":3,"file":"token-action-hud-fu.min.js","sources":["constants.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js","utils.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'token-action-hud-fu'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '1.5'\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n    basic: 'TYPES.Ittem.basic',\n    weapon: 'TYPES.Item.weapon',\n    shield: 'TYPES.Item.shield',\n    armor: 'TYPES.Item.armor',\n    accessory: 'TYPES.Item.accessory',\n    consumable: 'TYPES.Item.consumable',\n    treasure: 'TYPES.Item.treasure',\n    class: 'TYPES.Item.class',\n    skill: 'TYPES.Item.skill',\n    heroic: 'TYPES.Item.heroic',\n    spell: 'TYPES.Item.spell',\n    miscAbility: 'TYPES.Item.miscAbility',\n    rule: 'TYPES.Item.rule',\n    behavior: 'TYPES.Item.behavior',\n    ritual: 'TYPES.Item.ritual',\n    project: 'TYPES.Item.project',\n    classFeature: 'TYPES.Item.classFeature',\n    optionalFeature: 'TYPES.Item.optionalFeature',\n    effect: 'TYPES.Item.effect',\n\n    action: 'FU.Action',\n    attack: 'FU.Attack',\n    equipment: 'FU.Equipment',\n    guard: 'FU.Guard',\n    inventory: 'FU.Inventory',\n    hinder: 'FU.Hinder',\n    objective: 'FU.Objective',\n    study: 'FU.Study',\n\n    check: 'tokenActionHud.fu.check.label',\n    travel: 'tokenActionHud.fu.check.travelcheck',\n    utility: 'tokenActionHud.utility'\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n\n    equipped: { id: 'equipped', name: 'tokenActionHud.fu.equipped.label', type: 'system' },\n    basic: { id: 'basic', name: 'TYPES.Item.basic', type: 'system' },\n    weapon: { id: 'weapon', name: 'TYPES.Item.weapon', type: 'system' },\n    shield: { id: 'shield', name: 'TYPES.Item.shield', type: 'system' },\n    armor: { id: 'armor', name: 'TYPES.Item.armor', type: 'system' },\n    accessory: { id: 'accessory', name: 'TYPES.Item.accessory', type: 'system' },\n    consumable: { id: 'consumable', name: 'TYPES.Item.consumable', type: 'system' },\n    treasure: { id: 'treasure', name: 'TYPES.Item.treasure', type: 'system' },\n    class: { id: 'class', name: 'TYPES.Item.class', type: 'system' },\n    skill: { id: 'skill', name: 'TYPES.Item.skill', type: 'system' },\n    heroic: { id: 'heroic', name: 'TYPES.Item.heroic', type: 'system' },\n    miscAbility: { id: 'miscAbility', name: 'TYPES.Item.miscAbility', type: 'system' },\n    rule: { id: 'rule', name: 'TYPES.Item.rule', type: 'system' },\n    behavior: { id: 'behavior', name: 'TYPES.Item.behavior', type: 'system' },\n    spell: { id: 'spell', name: 'TYPES.Item.spell', type: 'system' },\n    ritual: { id: 'ritual', name: 'TYPES.Item.ritual', type: 'system' },\n    project: { id: 'project', name: 'TYPES.Item.project', type: 'system' },\n    classFeature: { id: 'classFeature', name: 'TYPES.Item.classFeature', type: 'system' },\n    optionalFeature: { id: 'optionalFeature', name: 'TYPES.Item.optionalFeature', type: 'system' },\n    effect: { id: 'effect', name: 'TYPES.Item.effect', type: 'system' },\n\n    // Action Labels\n    check: { id: 'check', name: 'tokenActionHud.fu.check.label', type: 'system' },\n    action: { id: 'action', name: 'FU.Actions', type: 'system' },\n    attack: { id: 'attack', name: 'FU.attack', type: 'system' },\n    equipment: { id: 'equipment', name: 'FU.equipment', type: 'system' },\n    guard: { id: 'guard', name: 'FU.guard', type: 'system' },\n    inventory: { id: 'inventory', name: 'FU.inventory', type: 'system' },\n    hinder: { id: 'hinder', name: 'FU.hinder', type: 'system' },\n    objective: { id: 'objective', name: 'FU.objective', type: 'system' },\n    study: { id: 'study', name: 'FU.study', type: 'system' },\n\n    // Utility Labels\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    basic: { groupId: 'basic' },\n    weapon: { groupId: 'weapon' },\n    shield: { groupId: 'shield' },\n    armor: { groupId: 'armor' },\n    accessory: { groupId: 'accessory' },\n    consumable: { groupId: 'consumable' },\n    treasure: { groupId: 'treasure' },\n    class: { groupId: 'class' },\n    skill: { groupId: 'skill' },\n    heroic: { groupId: 'heroic' },\n    miscAbility: { groupId: 'miscAbility' },\n    rule: { groupId: 'rule' },\n    spell: { groupId: 'spell' },\n    ritual: { groupId: 'ritual' },\n    project: { groupId: 'project' },\n    classFeature: { groupId: 'classFeature' },\n    optionalFeature: { groupId: 'optionalFeature' },\n    effect: { groupId: 'effect' }\n}\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE } from './constants.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n     */\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        /**\n         * Build system actions\n         * Called by Token Action HUD Core\n         * @override\n         * @param {array} groupIds\n         */\n        async buildSystemActions (groupIds) {\n            // Set actor and token variables\n            this.actors = (!this.actor) ? this._getActors() : [this.actor]\n            this.actorType = this.actor?.type\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            if (this.actorType === 'character') {\n                this.#buildCharacterActions()\n            } else if (this.actorType === 'npc') {\n                this.#buildNPCActions()\n            } else if (!this.actor) {\n                this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        #buildCharacterActions () {\n            this.#buildCheckActions()\n            this.#buildCombatActions()\n            this.#buildItems()\n            this.#buildTravel()\n        }\n\n        /**\n         * Build npc actions\n         * @private\n         */\n        #buildNPCActions () {\n            this.#buildCheckActions()\n            this.#buildCombatActions()\n            this.#buildItems()\n            this.#buildTravel()\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        #buildMultipleTokenActions () {\n        }\n\n        /**\n         * Build Check Action actions for the HUD\n         *\n         * This method will create buttons for each checks action type.\n         * @private\n         */\n        async #buildCheckActions () {\n            const checkActions = [\n                { id: 'attributeCheck', name: 'Attribute Check' },\n                { id: 'openCheck', name: 'Open Check' },\n                { id: 'groupCheck', name: 'Group Check' },\n                { id: 'initiativeCheck', name: 'Initiative Check' }\n            ]\n\n            const actionTypeId = 'action'\n            const checkGroupId = 'check'\n\n            const actions = checkActions.map(action => {\n                return {\n                    id: action.id,\n                    name: coreModule.api.Utils.i18n(action.name),\n                    listName: action.name,\n                    encodedValue: [actionTypeId, action.id].join(this.delimiter) // Ensure delimiter is defined\n                }\n            })\n\n            const checkGroupData = { id: checkGroupId, type: 'system' }\n            this.addActions(actions, checkGroupData)\n        }\n\n        /**\n         * Build Combat Action actions for the HUD\n         *\n         * This method will create buttons for each combat action type.\n         * @private\n         */\n        async #buildCombatActions () {\n            const combatActions = [\n                { id: 'guardAction', name: 'Guard' },\n                { id: 'equipmentAction', name: 'Equipment' },\n                { id: 'hinderAction', name: 'Hinder' },\n                { id: 'inventoryAction', name: 'Inventory' },\n                { id: 'objectiveAction', name: 'Objective' },\n                { id: 'spellAction', name: 'Spell' },\n                { id: 'studyAction', name: 'Study' },\n                { id: 'skillAction', name: 'Skill' }\n            ]\n\n            const actionTypeId = 'action'\n            const combatGroupId = 'action' // Group ID for combat actions\n\n            const actions = combatActions.map(action => {\n                return {\n                    id: action.id,\n                    name: coreModule.api.Utils.i18n(action.name),\n                    listName: action.name,\n                    encodedValue: [actionTypeId, action.id].join(this.delimiter) // Ensure delimiter is defined\n                }\n            })\n\n            const combatGroupData = { id: combatGroupId, type: 'system' }\n            this.addActions(actions, combatGroupData)\n        }\n\n        /**\n         * Build Travel Action actions for the HUD\n         *\n         * This method handle the construction of action buttons for all combat actions.\n         *\n         * @private\n         */\n        async #buildTravel () {\n            const actionTypeId = 'action' // Action type identifier\n            const travelGroupId = 'check' // Group ID for the travel actions\n\n            // Define the travel action button\n            const travelAction = {\n                id: 'travelAction',\n                name: coreModule.api.Utils.i18n('Travel Check'), // Label for the action button\n                listName: 'Travel Check', // Tooltip or extended name\n                encodedValue: [actionTypeId, 'travelCheck'].join(this.delimiter) // Encoded value for the action\n            }\n\n            // Add the travel action to the \"Travel\" group\n            const travelGroupData = { id: travelGroupId, type: 'system' }\n            this.addActions([travelAction], travelGroupData)\n        }\n\n        /**\n         * Build Inventory Actions for the HUD, including equipped items.\n         * @private\n         *\n         * This method handle the construction of action buttons for items in the actor's\n         * inventory, organized by equipment slots.\n         */\n        async #buildItems () {\n            // Exit if the actor has no items\n            if (this.items.size === 0) return\n\n            const actionTypeId = 'item' // Action type identifier\n            const inventoryMap = new Map() // Map for categorized inventory items\n\n            // Equipment slots\n            const slots = ['mainHand', 'offHand', 'phantom', 'armor', 'accessory', 'arcanum']\n            const equippedItemIds = new Set() // Store equipped item IDs\n\n            // Gather equipped items from slots\n            for (const slot of slots) {\n                const equippedItemId = this.actor.system.equipped[slot]\n                if (equippedItemId) equippedItemIds.add(equippedItemId)\n            }\n\n            // Categorize items in the inventory\n            for (const [itemId, itemData] of this.items) {\n                const typeMap = inventoryMap.get(itemData.type) ?? new Map()\n                typeMap.set(itemId, itemData)\n                inventoryMap.set(itemData.type, typeMap)\n            }\n\n            // Create action buttons for each item type\n            for (const [type, typeMap] of inventoryMap) {\n                const groupId = ITEM_TYPE[type]?.groupId\n                if (!groupId) continue // Skip if no group ID\n\n                const groupData = { id: groupId, type: 'system' } // Group data for the item type\n\n                // Generate actions for items in this type\n                const actions = [...typeMap].map(([itemId, itemData]) => {\n                    const id = itemId\n                    const name = itemData.name\n                    const description = itemData.system.description || ''\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}<br>${description}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue\n                    }\n                })\n\n                this.addActions(actions, groupData) // Add actions to the group\n            }\n\n            // Handle equipped items separately for the \"Equipped\" group\n            const equippedActions = [...this.items].filter(([itemId]) => equippedItemIds.has(itemId)).map(([itemId, itemData]) => {\n                const id = itemId\n                const name = itemData.name\n                const description = itemData.system.description || ''\n                const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}<br>${description}`\n                const encodedValue = [actionTypeId, id].join(this.delimiter)\n\n                return {\n                    id,\n                    name,\n                    listName,\n                    encodedValue\n                }\n            })\n\n            // Add equipped actions to the \"Equipped\" group\n            const equippedGroupData = { id: 'equipped', type: 'system' }\n            this.addActions(equippedActions, equippedGroupData)\n        }\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach((group) => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `${game.i18n.localize(\n            'tokenActionHud.fu.group'\n        )}: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'action',\n                id: 'action',\n                name: coreModule.api.Utils.i18n('Action'),\n                groups: [\n                    { ...groups.check, nestId: 'action_check' },\n                    { ...groups.action, nestId: 'action_action' }\n                ]\n            },\n            {\n                nestId: 'feature',\n                id: 'feature',\n                name: coreModule.api.Utils.i18n('Feature'),\n                groups: [\n                    { ...groups.basic, nestId: 'feature_basic' },\n                    { ...groups.spell, nestId: 'feature_spell' },\n                    { ...groups.miscAbility, nestId: 'feature_miscAbility' },\n                    { ...groups.rule, nestId: 'feature_rule' },\n                    { ...groups.ritual, nestId: 'feature_ritual' },\n                    { ...groups.project, nestId: 'feature_project' },\n                    { ...groups.classFeature, nestId: 'feature_classFeature' },\n                    { ...groups.optionalFeature, nestId: 'feature_optionalFeature' }\n                ]\n            },\n            {\n                nestId: 'item',\n                id: 'item',\n                name: coreModule.api.Utils.i18n('Items'),\n                groups: [\n                    { ...groups.equipped, nestId: 'item_equipped' },\n                    { ...groups.weapon, nestId: 'item_weapon' },\n                    { ...groups.shield, nestId: 'item_shield' },\n                    { ...groups.armor, nestId: 'item_armor' },\n                    { ...groups.accessory, nestId: 'item_accessory' },\n                    { ...groups.consumable, nestId: 'item_consumable' },\n                    { ...groups.treasure, nestId: 'item_treasure' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n     */\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n        /**\n         * Handle action click\n         * Called by Token Action HUD Core when an action is left or right-clicked\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionClick (event, encodedValue) {\n            const [actionTypeId, actionId] = encodedValue.split('|')\n\n            const isShift = this.shift\n\n            const renderable = ['item']\n\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n                return this.doRenderItem(this.actor, actionId)\n            }\n\n            const knownCharacters = ['character']\n\n            // If single actor is selected\n            if (this.actor) {\n                await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId, isShift)\n                return\n            }\n\n            const controlledTokens = canvas.tokens.controlled\n                .filter((token) => knownCharacters.includes(token.actor?.type))\n\n            // If multiple actors are selected\n            for (const token of controlledTokens) {\n                const actor = token.actor\n                await this.#handleAction(event, actor, token, actionTypeId, actionId, isShift)\n            }\n        }\n\n        /**\n         * Handle action hover\n         * Called by Token Action HUD Core when an action is hovered on or off\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionHover (event, encodedValue) {}\n\n        /**\n         * Handle group click\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n         * @override\n         * @param {object} event The event\n         * @param {object} group The group\n         */\n        async handleGroupClick (event, group) {}\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event        The event\n         * @param {object} actor        The actor\n         * @param {object} token        The token\n         * @param {string} actionTypeId The action type id\n         * @param {string} actionId     The actionId\n         */\n        async #handleAction (event, actor, token, actionTypeId, actionId, isShift) {\n            switch (actionTypeId) {\n            case 'item':\n                this.#handleItemAction(event, actor, actionId)\n                break\n            case 'action':\n                this.#handleCombatAction(event, actor, actionId, isShift)\n                break\n            case 'utility':\n                this.#handleUtilityAction(token, actionId)\n                break\n            }\n        }\n\n        /**\n         * Handles combat actions\n         *\n         * @private\n         * @param {Event} event     The event\n         * @param {Object} actor    The actor\n         * @param {string} actionId The action type id\n         * @param {boolean} isShift Whether Shift key was pressed\n         *\n         * @returns {Promise<void>}\n         */\n        async #handleCombatAction (event, actor, actionId, isShift) {\n            const combatActionHandler = new game.projectfu.ActionHandler(actor)\n\n            switch (actionId) {\n            case 'equipmentAction':\n                await combatActionHandler.handleAction('equipmentAction', isShift)\n                break\n            case 'guardAction':\n                await combatActionHandler.handleAction('guardAction', isShift)\n                break\n            case 'hinderAction':\n                await combatActionHandler.handleAction('hinderAction', isShift)\n                break\n            case 'inventoryAction':\n                await combatActionHandler.handleAction('inventoryAction', isShift)\n                break\n            case 'objectiveAction':\n                await combatActionHandler.handleAction('objectiveAction', isShift)\n                break\n            case 'spellAction':\n                await combatActionHandler.handleAction('spellAction', isShift)\n                break\n            case 'studyAction':\n                await combatActionHandler.handleAction('studyAction', isShift)\n                break\n            case 'skillAction':\n                await combatActionHandler.handleAction('skillAction', isShift)\n                break\n            case 'attributeCheck':\n                Hooks.call('promptAttributeCheckCalled', actor)\n                break\n            case 'openCheck':\n                Hooks.call('promptOpenCheckCalled', actor)\n                break\n            case 'groupCheck':\n                Hooks.call('promptGroupCheckCalled', actor)\n                break\n            case 'initiativeCheck':\n                Hooks.call('promptInitiativeCheckCalled', actor)\n                break\n            case 'travelCheck':\n                game.lookfar.showTravelCheckDialog()\n                break\n            default:\n                console.warn(`Unknown action ID: ${actionId}`)\n                break\n            }\n        }\n\n        /**\n         * Handle item action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleItemAction (event, actor, actionId) {\n            const item = actor.items.get(actionId)\n            item.roll()\n        }\n\n        /**\n         * Handle utility action\n         * @private\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #handleUtilityAction (token, actionId) {\n            switch (actionId) {\n            case 'endTurn':\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            }\n        }\n    }\n})\n","// import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n    // game.settings.register(MODULE.ID, 'displayUnequipped', {\n    //     name: game.i18n.localize('tokenActionHud.fu.settings.displayUnequipped.name'),\n    //     hint: game.i18n.localize('tokenActionHud.fu.settings.displayUnequipped.hint'\n    //     ),\n    //     scope: 'client',\n    //     config: true,\n    //     type: Boolean,\n    //     default: true,\n    //     onChange: (value) => {\n    //         coreUpdate(value)\n    //     }\n    // })\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler () {\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Fabula Ultima'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}              The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults () {\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        registerStyles () {\n            return {\n                template: {\n                    class: 'tah-style-fu-style', // The class to add to first DIV element\n                    file: 'tah-fu-style', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'PFU Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","basic","weapon","shield","armor","accessory","consumable","treasure","class","skill","heroic","spell","miscAbility","rule","behavior","ritual","project","classFeature","optionalFeature","effect","action","attack","equipment","guard","inventory","hinder","objective","study","check","travel","utility","GROUP","equipped","id","name","type","combat","token","ITEM_TYPE","groupId","ActionHandler","Hooks","once","async","coreModule","api","groupIds","this","actors","actor","_getActors","actorType","items","Utils","sortItemsByName","buildCharacterActions","buildNPCActions","buildMultipleTokenActions","buildCheckActions","buildCombatActions","buildItems","buildTravel","actionTypeId","actions","map","i18n","listName","encodedValue","join","delimiter","checkGroupData","addActions","combatGroupData","travelAction","travelGroupData","size","inventoryMap","Map","slots","equippedItemIds","Set","slot","equippedItemId","system","add","itemId","itemData","typeMap","get","set","groupData","description","actionTypeName","equippedActions","filter","has","DEFAULTS","groups","Object","values","forEach","group","game","localize","groupsArray","layout","nestId","rests","RollHandler","register","coreUpdate","event","actionId","split","isShift","shift","includes","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","handleItemAction","handleCombatAction","handleUtilityAction","combatActionHandler","projectfu","call","lookfar","showTravelCheckDialog","console","warn","roll","current","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","registerStyles","template","file","moduleId","on","module","modules","requiredCoreModuleVersion","static","key","defaultValue","value","settings","Logger","debug"],"mappings":"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"}