var t,e;(t=self.document)&&!t.getElementById("livereloadscript")&&((e=t.createElement("script")).async=1,e.src="//"+(self.location.host||"localhost").split(":")[0]+":10000/livereload.js?snipver=1",e.id="livereloadscript",t.getElementsByTagName("head")[0].appendChild(e));const i={ID:"token-action-hud-fu"},s={ID:"token-action-hud-core"},n="1.5",o={attack:"tokenActionHud.attack",equipment:"tokenActionHud.equipment",guard:"tokenActionHud.guard",utility:"tokenActionHud.utility"},a={mainSlot:{id:"mainSlot",name:"tokenActionHud.fu.attack.mainSlot",type:"system"},offSlot:{id:"offSlot",name:"tokenActionHud.fu.attack.offSlot",type:"system"},armorSlot:{id:"armorSlot",name:"tokenActionHud.fu.attack.armorSlot",type:"system"},accessorySlot:{id:"accessorySlot",name:"tokenActionHud.fu.attack.accessorySlot",type:"system"},weapons:{id:"weapons",name:"tokenActionHud.fu.equipment.weapons",type:"system"},shields:{id:"shields",name:"tokenActionHud.fu.equipment.shields",type:"system"},armor:{id:"armor",name:"tokenActionHud.fu.equipment.armor",type:"system"},accessories:{id:"accessories",name:"tokenActionHud.fu.equipment.accessories",type:"system"},consumables:{id:"consumables",name:"tokenActionHud.fu.equipment.consumables",type:"system"},treasures:{id:"treasures",name:"tokenActionHud.fu.equipment.treasures",type:"system"},spells:{id:"spells",name:"tokenActionHud.fu.spells.label",type:"system"},miscAbility:{id:"abilities",name:"tokenActionHud.fu.abilities.label",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},l={weapon:{groupId:"weapons"},shield:{groupId:"shields"},armor:{groupId:"armor"},accessory:{groupId:"accessories"},consumable:{groupId:"consumables"},treasure:{groupId:"treasures"},spell:{groupId:"spells"},miscAbility:{groupId:"abilities"}},c={mainSlot:{groupId:"mainSlot"},offSlot:{groupId:"offSlot"},armorSlot:{groupId:"armorSlot"},accessorySlot:{groupId:"accessorySlot"}};let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class Utils{static getSetting(e,s=null){let n=s??null;try{n=game.settings.get(i.ID,e)}catch{t.api.Logger.debug(`Setting '${e}' not found`)}return n}static async setSetting(e,s){try{s=await game.settings.set(i.ID,e,s),t.api.Logger.debug(`Setting '${e}' set to '${s}'`)}catch{t.api.Logger.debug(`Setting '${e}' not found`)}}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class ActionHandler extends t.api.ActionHandler{a;async buildSystemActions(e){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=r.getSetting("displayUnequipped"),this.actor){let e=this.actor.items;e=t.api.Utils.sortItemsByName(e),this.items=e}"character"===this.actorType?this.#t():"npc"===this.actorType?this.#e():this.actor||this.#i()}#t(){this.#s(),this.#n()}#e(){}#i(){}handleTravelActionClick(){showTravelCheckDialog()}async#s(){if(0===this.items.size)return;const e="item",i=new Map;for(const[t,e]of this.items){const s=e.type;if(e.equipped||this.displayUnequipped){const n=i.get(s)??new Map;n.set(t,e),i.set(s,n)}}for(const[s,n]of i){const i=l[s]?.groupId;if(!i)continue;const a={id:i,type:"system"},c=[...n].map((([i,s])=>{const n=i,a=s.name,l=t.api.Utils.i18n(o[e]),c=`${l?`${l}: `:""}${a}`,r=[e,n].join(this.delimiter);return{id:n,name:a,listName:c,encodedValue:r}}));this.addActions(c,a)}}async#n(){const t=l.travel?.groupId;if(!t)return;const e={id:t,type:"system"},i=[{id:"travel",name:"Travel",listName:"Travel",encodedValue:["travel","travel"].join(this.delimiter)}];this.addActions(i,e),$(`#${e.id}`).click((t=>{t.preventDefault(),this.handleTravelActionClick()}))}}}));let u=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=a;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const i=Object.values(e);u={layout:[{nestId:"attack",id:"attack",name:t.api.Utils.i18n("Attack"),groups:[{...e.mainSlot,nestId:"attack_mainSlot"},{...e.offSlot,nestId:"attack_offSlot"},{...e.armorSlot,nestId:"attack_armorSlot"},{...e.accessorySlot,nestId:"attack_accessorySlot"}]},{nestId:"equipment",id:"equipment",name:t.api.Utils.i18n("Equipment"),groups:[{...e.weapons,nestId:"equipment_weapons"},{...e.shields,nestId:"equipment_shields"},{...e.armor,nestId:"equipment_armor"},{...e.accessories,nestId:"equipment_accessories"},{...e.consumables,nestId:"equipment_consumables"},{...e.treasures,nestId:"equipment_treasures"}]},{nestId:"guard",id:"guard",name:t.api.Utils.i18n("Guard"),groups:[{...e.weapons,nestId:"equipment_weapons"}]},{nestId:"spell",id:"spell",name:t.api.Utils.i18n("Spell"),groups:[{...e.spells,nestId:"spell_name"}]},{nestId:"travel",id:"travel",name:t.api.Utils.i18n("Travel"),groups:[{...e.travels,nestId:"travel_name"}]},{nestId:"utility",id:"utility",name:t.api.Utils.i18n("tokenActionHud.utility"),groups:[{...e.combat,nestId:"utility_combat"},{...e.token,nestId:"utility_token"},{...e.rests,nestId:"utility_rests"},{...e.utility,nestId:"utility_utility"}]}],groups:i}}));let m=null;function register(t){game.settings.register(i.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.fu.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.fu.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{m=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const[i,s]=e.split("|");if(["item"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,s);const n=["character"];if(this.actor)return void await this.#o(t,this.actor,this.token,i,s);const o=canvas.tokens.controlled.filter((t=>n.includes(t.actor?.type)));for(const e of o){const n=e.actor;await this.#o(t,n,e,i,s)}}async handleActionHover(t,e){}async handleGroupClick(t,e){}async#o(t,e,i,s,n){switch(s){case"item":this.#a(t,e,n);break;case"utility":this.#l(i,n)}}#a(t,e,i){e.items.get(i).roll()}async#l(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let p=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{p=class SystemManager extends t.api.SystemManager{getActionHandler(){return new d}getAvailableRollHandlers(){return{core:"Fabula Ultima"}}getRollHandler(t){let e;return e=new m,e}async registerDefaults(){return u}registerSettings(t){register(t)}registerStyles(){return{template:{class:"tah-style-fu-style",file:"tah-fu-style",moduleId:i.ID,name:"FU Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(i.ID);t.api={requiredCoreModuleVersion:"1.5",SystemManager:p},Hooks.call("tokenActionHudSystemReady",t)}));export{o as ACTION_TYPE,d as ActionHandler,s as CORE_MODULE,u as DEFAULTS,a as GROUP,l as ITEM_TYPE,i as MODULE,n as REQUIRED_CORE_MODULE_VERSION,m as RollHandler,c as SLOT_TYPE,p as SystemManager,r as Utils,register};
