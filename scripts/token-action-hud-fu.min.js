var e,t;(e=self.document)&&!e.getElementById("livereloadscript")&&((t=e.createElement("script")).async=1,t.src="//"+(self.location.host||"localhost").split(":")[0]+":9999/livereload.js?snipver=1",t.id="livereloadscript",e.getElementsByTagName("head")[0].appendChild(t));const i={ID:"token-action-hud-fu"},a={ID:"token-action-hud-core"},s="1.5",n={basic:"TYPES.Ittem.basic",weapon:"TYPES.Item.weapon",shield:"TYPES.Item.shield",armor:"TYPES.Item.armor",accessory:"TYPES.Item.accessory",consumable:"TYPES.Item.consumable",treasure:"TYPES.Item.treasure",class:"TYPES.Item.class",skill:"TYPES.Item.skill",heroic:"TYPES.Item.heroic",spell:"TYPES.Item.spell",miscAbility:"TYPES.Item.miscAbility",rule:"TYPES.Item.rule",behavior:"TYPES.Item.behavior",ritual:"TYPES.Item.ritual",project:"TYPES.Item.project",classFeature:"TYPES.Item.classFeature",optionalFeature:"TYPES.Item.optionalFeature",effect:"TYPES.Item.effect",action:"FU.Action",attack:"FU.Attack",equipment:"FU.Equipment",guard:"FU.Guard",inventory:"FU.Inventory",hinder:"FU.Hinder",objective:"FU.Objective",study:"FU.Study",check:"tokenActionHud.fu.check.label",travel:"tokenActionHud.fu.check.travelcheck",utility:"tokenActionHud.utility"},o={equipped:{id:"equipped",name:"tokenActionHud.fu.equipped.label",type:"system"},basic:{id:"basic",name:"TYPES.Item.basic",type:"system"},weapon:{id:"weapon",name:"TYPES.Item.weapon",type:"system"},shield:{id:"shield",name:"TYPES.Item.shield",type:"system"},armor:{id:"armor",name:"TYPES.Item.armor",type:"system"},accessory:{id:"accessory",name:"TYPES.Item.accessory",type:"system"},consumable:{id:"consumable",name:"TYPES.Item.consumable",type:"system"},treasure:{id:"treasure",name:"TYPES.Item.treasure",type:"system"},class:{id:"class",name:"TYPES.Item.class",type:"system"},skill:{id:"skill",name:"TYPES.Item.skill",type:"system"},heroic:{id:"heroic",name:"TYPES.Item.heroic",type:"system"},miscAbility:{id:"miscAbility",name:"TYPES.Item.miscAbility",type:"system"},rule:{id:"rule",name:"TYPES.Item.rule",type:"system"},behavior:{id:"behavior",name:"TYPES.Item.behavior",type:"system"},spell:{id:"spell",name:"TYPES.Item.spell",type:"system"},ritual:{id:"ritual",name:"TYPES.Item.ritual",type:"system"},project:{id:"project",name:"TYPES.Item.project",type:"system"},classFeature:{id:"classFeature",name:"TYPES.Item.classFeature",type:"system"},optionalFeature:{id:"optionalFeature",name:"TYPES.Item.optionalFeature",type:"system"},effect:{id:"effect",name:"TYPES.Item.effect",type:"system"},check:{id:"check",name:"tokenActionHud.fu.check.label",type:"system"},action:{id:"action",name:"FU.Actions",type:"system"},attack:{id:"attack",name:"FU.attack",type:"system"},equipment:{id:"equipment",name:"FU.equipment",type:"system"},guard:{id:"guard",name:"FU.guard",type:"system"},inventory:{id:"inventory",name:"FU.inventory",type:"system"},hinder:{id:"hinder",name:"FU.hinder",type:"system"},objective:{id:"objective",name:"FU.objective",type:"system"},study:{id:"study",name:"FU.study",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},c={basic:{groupId:"basic"},weapon:{groupId:"weapon"},shield:{groupId:"shield"},armor:{groupId:"armor"},accessory:{groupId:"accessory"},consumable:{groupId:"consumable"},treasure:{groupId:"treasure"},class:{groupId:"class"},skill:{groupId:"skill"},heroic:{groupId:"heroic"},miscAbility:{groupId:"miscAbility"},rule:{groupId:"rule"},spell:{groupId:"spell"},ritual:{groupId:"ritual"},project:{groupId:"project"},classFeature:{groupId:"classFeature"},optionalFeature:{groupId:"optionalFeature"},effect:{groupId:"effect"}};let r=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{r=class ActionHandler extends e.api.ActionHandler{async buildSystemActions(t){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}"character"===this.actorType?this.#e():"npc"===this.actorType?this.#t():this.actor||this.#i()}#e(){this.#a(),this.#s(),this.#n()}#t(){this.#a(),this.#s(),this.#n()}#i(){}async#a(){const t="action",i=[{id:"guardAction",name:"Guard"},{id:"equipmentAction",name:"Equipment"},{id:"hinderAction",name:"Hinder"},{id:"inventoryAction",name:"Inventory"},{id:"objectiveAction",name:"Objective"},{id:"spellAction",name:"Spell"},{id:"studyAction",name:"Study"},{id:"skillAction",name:"Skill"}].map((i=>({id:i.id,name:e.api.Utils.i18n(i.name),listName:i.name,encodedValue:[t,i.id].join(this.delimiter)}))),a={id:"action",type:"system"};this.addActions(i,a)}async#n(){const t={id:"travelAction",name:e.api.Utils.i18n("Travel Check"),listName:"Travel Check",encodedValue:["action","travelCheck"].join(this.delimiter)},i={id:"check",type:"system"};this.addActions([t],i)}async#s(){if(0===this.items.size)return;const t="item",i=new Map,a=["mainHand","offHand","phantom","armor","accessory","arcanum"],s=new Set;for(const e of a){const t=this.actor.system.equipped[e];t&&s.add(t)}for(const[e,t]of this.items){const a=i.get(t.type)??new Map;a.set(e,t),i.set(t.type,a)}for(const[a,s]of i){const i=c[a]?.groupId;if(!i)continue;const o={id:i,type:"system"},r=[...s].map((([i,a])=>{const s=i,o=a.name,c=a.system.description||"",r=e.api.Utils.i18n(n[t]),l=`${r?`${r}: `:""}${o}<br>${c}`,d=[t,s].join(this.delimiter);return{id:s,name:o,listName:l,encodedValue:d}}));this.addActions(r,o)}const o=[...this.items].filter((([e])=>s.has(e))).map((([i,a])=>{const s=i,o=a.name,c=a.system.description||"",r=e.api.Utils.i18n(n[t]),l=`${r?`${r}: `:""}${o}<br>${c}`,d=[t,s].join(this.delimiter);return{id:s,name:o,listName:l,encodedValue:d}}));this.addActions(o,{id:"equipped",type:"system"})}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=o;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`${game.i18n.localize("tokenActionHud.fu.group")}: ${e.api.Utils.i18n(t.listName??t.name)}`}));const i=Object.values(t);l={layout:[{nestId:"action",id:"action",name:e.api.Utils.i18n("Action"),groups:[{...t.check,nestId:"action_check"},{...t.action,nestId:"action_action"}]},{nestId:"feature",id:"feature",name:e.api.Utils.i18n("Feature"),groups:[{...t.basic,nestId:"feature_basic"},{...t.spell,nestId:"feature_spell"},{...t.miscAbility,nestId:"feature_miscAbility"},{...t.rule,nestId:"feature_rule"},{...t.ritual,nestId:"feature_ritual"},{...t.project,nestId:"feature_project"},{...t.classFeature,nestId:"feature_classFeature"},{...t.optionalFeature,nestId:"feature_optionalFeature"}]},{nestId:"item",id:"item",name:e.api.Utils.i18n("Items"),groups:[{...t.equipped,nestId:"item_equipped"},{...t.weapon,nestId:"item_weapon"},{...t.shield,nestId:"item_shield"},{...t.armor,nestId:"item_armor"},{...t.accessory,nestId:"item_accessory"},{...t.consumable,nestId:"item_consumable"},{...t.treasure,nestId:"item_treasure"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.utility"),groups:[{...t.combat,nestId:"utility_combat"},{...t.token,nestId:"utility_token"},{...t.rests,nestId:"utility_rests"},{...t.utility,nestId:"utility_utility"}]}],groups:i}}));let d=null;function register(e){}Hooks.once("tokenActionHudCoreApiReady",(async e=>{d=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const[i,a]=t.split("|"),s=this.shift;if(["item"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,a);const n=["character"];if(this.actor)return void await this.#o(e,this.actor,this.token,i,a,s);const o=canvas.tokens.controlled.filter((e=>n.includes(e.actor?.type)));for(const t of o){const n=t.actor;await this.#o(e,n,t,i,a,s)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#o(e,t,i,a,s,n){switch(a){case"item":this.#c(e,t,s);break;case"action":this.#r(e,t,s,n);break;case"utility":this.#l(i,s)}}async#r(e,t,i,a){const s=new game.projectfu.ActionHandler(t);switch(i){case"equipmentAction":await s.handleAction("equipmentAction",a);break;case"guardAction":await s.handleAction("guardAction",a);break;case"hinderAction":await s.handleAction("hinderAction",a);break;case"inventoryAction":await s.handleAction("inventoryAction",a);break;case"objectiveAction":await s.handleAction("objectiveAction",a);break;case"spellAction":await s.handleAction("spellAction",a);break;case"studyAction":await s.handleAction("studyAction",a);break;case"skillAction":await s.handleAction("skillAction",a);break;case"travelCheck":game.lookfar.showTravelCheckDialog();break;default:console.warn(`Unknown action ID: ${i}`)}}#c(e,t,i){t.items.get(i).roll()}async#l(e,t){if("endTurn"===t)game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}}}));let m=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{m=class SystemManager extends e.api.SystemManager{getActionHandler(){return new r}getAvailableRollHandlers(){return{core:"Fabula Ultima"}}getRollHandler(e){let t;return t=new d,t}async registerDefaults(){return l}registerSettings(e){}registerStyles(){return{template:{class:"tah-style-fu-style",file:"tah-fu-style",moduleId:i.ID,name:"PFU Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(i.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:m},Hooks.call("tokenActionHudSystemReady",e)}));let u=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{u=class Utils{static getSetting(t,a=null){let s=a??null;try{s=game.settings.get(i.ID,t)}catch{e.api.Logger.debug(`Setting '${t}' not found`)}return s}static async setSetting(t,a){try{a=await game.settings.set(i.ID,t,a),e.api.Logger.debug(`Setting '${t}' set to '${a}'`)}catch{e.api.Logger.debug(`Setting '${t}' not found`)}}}}));export{n as ACTION_TYPE,r as ActionHandler,a as CORE_MODULE,l as DEFAULTS,o as GROUP,c as ITEM_TYPE,i as MODULE,s as REQUIRED_CORE_MODULE_VERSION,d as RollHandler,m as SystemManager,u as Utils,register};
//# sourceMappingURL=token-action-hud-fu.min.js.map
