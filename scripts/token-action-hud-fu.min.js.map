{"version":3,"file":"token-action-hud-fu.min.js","sources":["constants.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","utils.js"],"sourcesContent":["/**\r\n * Module-based constants\r\n */\r\nexport const MODULE = {\r\n    ID: 'token-action-hud-fu'\r\n}\r\n\r\n/**\r\n * Core module\r\n */\r\nexport const CORE_MODULE = {\r\n    ID: 'token-action-hud-core'\r\n}\r\n\r\n/**\r\n * Core module version required by the system module\r\n */\r\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0'\r\n\r\n/**\r\n * Action types\r\n */\r\nexport const ACTION_TYPE = {\r\n    basic: 'TYPES.Ittem.basic',\r\n    weapon: 'TYPES.Item.weapon',\r\n    shield: 'TYPES.Item.shield',\r\n    armor: 'TYPES.Item.armor',\r\n    accessory: 'TYPES.Item.accessory',\r\n    consumable: 'TYPES.Item.consumable',\r\n    treasure: 'TYPES.Item.treasure',\r\n    class: 'TYPES.Item.class',\r\n    skill: 'TYPES.Item.skill',\r\n    heroic: 'TYPES.Item.heroic',\r\n    spell: 'TYPES.Item.spell',\r\n    miscAbility: 'TYPES.Item.miscAbility',\r\n    rule: 'TYPES.Item.rule',\r\n    behavior: 'TYPES.Item.behavior',\r\n    ritual: 'TYPES.Item.ritual',\r\n    project: 'TYPES.Item.project',\r\n    classFeature: 'TYPES.Item.classFeature',\r\n    optionalFeature: 'TYPES.Item.optionalFeature',\r\n    effect: 'TYPES.Item.effect',\r\n\r\n    action: 'FU.Action',\r\n    attack: 'FU.Attack',\r\n    equipment: 'FU.Equipment',\r\n    guard: 'FU.Guard',\r\n    inventory: 'FU.Inventory',\r\n    hinder: 'FU.Hinder',\r\n    objective: 'FU.Objective',\r\n    study: 'FU.Study',\r\n\r\n    check: 'tokenActionHud.fu.check.label',\r\n    travel: 'tokenActionHud.fu.check.travelcheck',\r\n    utility: 'tokenActionHud.utility'\r\n}\r\n\r\n/**\r\n * Groups\r\n */\r\nexport const GROUP = {\r\n\r\n    equipped: { id: 'equipped', name: 'tokenActionHud.fu.equipped.label', type: 'system' },\r\n    basic: { id: 'basic', name: 'TYPES.Item.basic', type: 'system' },\r\n    weapon: { id: 'weapon', name: 'TYPES.Item.weapon', type: 'system' },\r\n    shield: { id: 'shield', name: 'TYPES.Item.shield', type: 'system' },\r\n    armor: { id: 'armor', name: 'TYPES.Item.armor', type: 'system' },\r\n    accessory: { id: 'accessory', name: 'TYPES.Item.accessory', type: 'system' },\r\n    consumable: { id: 'consumable', name: 'TYPES.Item.consumable', type: 'system' },\r\n    treasure: { id: 'treasure', name: 'TYPES.Item.treasure', type: 'system' },\r\n    class: { id: 'class', name: 'TYPES.Item.class', type: 'system' },\r\n    skill: { id: 'skill', name: 'TYPES.Item.skill', type: 'system' },\r\n    heroic: { id: 'heroic', name: 'TYPES.Item.heroic', type: 'system' },\r\n    miscAbility: { id: 'miscAbility', name: 'TYPES.Item.miscAbility', type: 'system' },\r\n    rule: { id: 'rule', name: 'TYPES.Item.rule', type: 'system' },\r\n    behavior: { id: 'behavior', name: 'TYPES.Item.behavior', type: 'system' },\r\n    spell: { id: 'spell', name: 'TYPES.Item.spell', type: 'system' },\r\n    ritual: { id: 'ritual', name: 'TYPES.Item.ritual', type: 'system' },\r\n    project: { id: 'project', name: 'TYPES.Item.project', type: 'system' },\r\n    classFeature: { id: 'classFeature', name: 'TYPES.Item.classFeature', type: 'system' },\r\n    optionalFeature: { id: 'optionalFeature', name: 'TYPES.Item.optionalFeature', type: 'system' },\r\n    effect: { id: 'effect', name: 'TYPES.Item.effect', type: 'system' },\r\n\r\n    // Action Labels\r\n    check: { id: 'check', name: 'tokenActionHud.fu.check.label', type: 'system' },\r\n    action: { id: 'action', name: 'FU.Actions', type: 'system' },\r\n    attack: { id: 'attack', name: 'FU.attack', type: 'system' },\r\n    equipment: { id: 'equipment', name: 'FU.equipment', type: 'system' },\r\n    guard: { id: 'guard', name: 'FU.guard', type: 'system' },\r\n    inventory: { id: 'inventory', name: 'FU.inventory', type: 'system' },\r\n    hinder: { id: 'hinder', name: 'FU.hinder', type: 'system' },\r\n    objective: { id: 'objective', name: 'FU.objective', type: 'system' },\r\n    study: { id: 'study', name: 'FU.study', type: 'system' },\r\n\r\n    // Utility Labels\r\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\r\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\r\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' }\r\n}\r\n\r\n/**\r\n * Item types\r\n */\r\nexport const ITEM_TYPE = {\r\n    basic: { groupId: 'basic' },\r\n    weapon: { groupId: 'weapon' },\r\n    shield: { groupId: 'shield' },\r\n    armor: { groupId: 'armor' },\r\n    accessory: { groupId: 'accessory' },\r\n    consumable: { groupId: 'consumable' },\r\n    treasure: { groupId: 'treasure' },\r\n    class: { groupId: 'class' },\r\n    skill: { groupId: 'skill' },\r\n    heroic: { groupId: 'heroic' },\r\n    miscAbility: { groupId: 'miscAbility' },\r\n    rule: { groupId: 'rule' },\r\n    spell: { groupId: 'spell' },\r\n    ritual: { groupId: 'ritual' },\r\n    project: { groupId: 'project' },\r\n    classFeature: { groupId: 'classFeature' },\r\n    optionalFeature: { groupId: 'optionalFeature' },\r\n    effect: { groupId: 'effect' }\r\n}\r\n","// System Module Imports\r\nimport { ACTION_TYPE, ITEM_TYPE } from './constants.js'\r\n\r\nexport let ActionHandler = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    /**\r\n     * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\r\n     * @remarks https://github.com/Larkinabout/fvtt-token-action-hud-core/wiki/Core-Changes-for-System-Module-Developers\r\n     */\r\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\r\n        /**\r\n         * Build system actions\r\n         * Called by Token Action HUD Core\r\n         * @override\r\n         * @param {array} groupIds\r\n         */\r\n        async buildSystemActions (groupIds) {\r\n            this.actorType = this.actor?.type\r\n\r\n            // Set items variable\r\n            if (this.actor) {\r\n                let items = this.actor.items\r\n                items = coreModule.api.Utils.sortItemsByName(items)\r\n                this.items = items\r\n            }\r\n\r\n            if (this.actorType === 'character') {\r\n                this.#buildCharacterActions()\r\n            } else if (this.actorType === 'npc') {\r\n                this.#buildNPCActions()\r\n            } else if (!this.actor) {\r\n                this.#buildMultipleTokenActions()\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build character actions\r\n         * @private\r\n         */\r\n        #buildCharacterActions () {\r\n            this.#buildCheckActions()\r\n            this.#buildCombatActions()\r\n            this.#buildItems()\r\n            this.#buildTravel()\r\n        }\r\n\r\n        /**\r\n         * Build npc actions\r\n         * @private\r\n         */\r\n        #buildNPCActions () {\r\n            this.#buildCheckActions()\r\n            this.#buildCombatActions()\r\n            this.#buildItems()\r\n            this.#buildTravel()\r\n        }\r\n\r\n        /**\r\n         * Build multiple token actions\r\n         * @private\r\n         * @returns {object}\r\n         */\r\n        #buildMultipleTokenActions () {\r\n        }\r\n\r\n        /**\r\n         * Build Check Action actions for the HUD\r\n         *\r\n         * This method will create buttons for each checks action type.\r\n         * @private\r\n         */\r\n        async #buildCheckActions () {\r\n            const checkActions = [\r\n                { id: 'attributeCheck', name: 'Attribute Check' },\r\n                { id: 'openCheck', name: 'Open Check' },\r\n                { id: 'groupCheck', name: 'Group Check' },\r\n                { id: 'initiativeCheck', name: 'Initiative Check' }\r\n            ]\r\n\r\n            const actionTypeId = 'action'\r\n            const checkGroupId = 'check'\r\n\r\n            const actions = checkActions.map(action => {\r\n                return {\r\n                    id: action.id,\r\n                    name: coreModule.api.Utils.i18n(action.name),\r\n                    listName: action.name,\r\n                    encodedValue: [actionTypeId, action.id].join(this.delimiter) // Ensure delimiter is defined\r\n                }\r\n            })\r\n\r\n            const checkGroupData = { id: checkGroupId, type: 'system' }\r\n            this.addActions(actions, checkGroupData)\r\n        }\r\n\r\n        /**\r\n         * Build Combat Action actions for the HUD\r\n         *\r\n         * This method will create buttons for each combat action type.\r\n         * @private\r\n         */\r\n        async #buildCombatActions () {\r\n            const combatActions = [\r\n                { id: 'guardAction', name: 'Guard' },\r\n                { id: 'equipmentAction', name: 'Equipment' },\r\n                { id: 'hinderAction', name: 'Hinder' },\r\n                { id: 'inventoryAction', name: 'Inventory' },\r\n                { id: 'objectiveAction', name: 'Objective' },\r\n                { id: 'spellAction', name: 'Spell' },\r\n                { id: 'studyAction', name: 'Study' },\r\n                { id: 'skillAction', name: 'Skill' }\r\n            ]\r\n\r\n            const actionTypeId = 'action'\r\n            const combatGroupId = 'action' // Group ID for combat actions\r\n\r\n            const actions = combatActions.map(action => {\r\n                return {\r\n                    id: action.id,\r\n                    name: coreModule.api.Utils.i18n(action.name),\r\n                    listName: action.name,\r\n                    encodedValue: [actionTypeId, action.id].join(this.delimiter) // Ensure delimiter is defined\r\n                }\r\n            })\r\n\r\n            const combatGroupData = { id: combatGroupId, type: 'system' }\r\n            this.addActions(actions, combatGroupData)\r\n        }\r\n\r\n        /**\r\n         * Build Travel Action actions for the HUD\r\n         *\r\n         * This method handle the construction of action buttons for all combat actions.\r\n         *\r\n         * @private\r\n         */\r\n        async #buildTravel () {\r\n            const actionTypeId = 'action' // Action type identifier\r\n            const travelGroupId = 'check' // Group ID for the travel actions\r\n\r\n            // Define the travel action button\r\n            const travelAction = {\r\n                id: 'travelAction',\r\n                name: coreModule.api.Utils.i18n('Travel Check'), // Label for the action button\r\n                listName: 'Travel Check', // Tooltip or extended name\r\n                encodedValue: [actionTypeId, 'travelCheck'].join(this.delimiter) // Encoded value for the action\r\n            }\r\n\r\n            // Add the travel action to the \"Travel\" group\r\n            const travelGroupData = { id: travelGroupId, type: 'system' }\r\n            this.addActions([travelAction], travelGroupData)\r\n        }\r\n\r\n        /**\r\n         * Build Inventory Actions for the HUD, including equipped items.\r\n         * @private\r\n         *\r\n         * This method handle the construction of action buttons for items in the actor's\r\n         * inventory, organized by equipment slots.\r\n         */\r\n        async #buildItems () {\r\n            // Exit if the actor has no items\r\n            if (this.items.size === 0) return\r\n\r\n            const actionTypeId = 'item' // Action type identifier\r\n            const inventoryMap = new Map() // Map for categorized inventory items\r\n\r\n            // Equipment slots\r\n            const slots = ['mainHand', 'offHand', 'phantom', 'armor', 'accessory', 'arcanum']\r\n            const equippedItemIds = new Set() // Store equipped item IDs\r\n\r\n            // Gather equipped items from slots\r\n            for (const slot of slots) {\r\n                const equippedItemId = this.actor.system.equipped[slot]\r\n                if (equippedItemId) equippedItemIds.add(equippedItemId)\r\n            }\r\n\r\n            // Categorize items in the inventory\r\n            for (const [itemId, itemData] of this.items) {\r\n                const typeMap = inventoryMap.get(itemData.type) ?? new Map()\r\n                typeMap.set(itemId, itemData)\r\n                inventoryMap.set(itemData.type, typeMap)\r\n            }\r\n\r\n            // Create action buttons for each item type\r\n            for (const [type, typeMap] of inventoryMap) {\r\n                const groupId = ITEM_TYPE[type]?.groupId\r\n                if (!groupId) continue // Skip if no group ID\r\n\r\n                const groupData = { id: groupId, type: 'system' } // Group data for the item type\r\n\r\n                // Generate actions for items in this type\r\n                const actions = [...typeMap].map(([itemId, itemData]) => {\r\n                    const id = itemId\r\n                    const name = itemData.name\r\n                    const description = itemData.system.description || ''\r\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\r\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}<br>${description}`\r\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\r\n\r\n                    return {\r\n                        id,\r\n                        name,\r\n                        listName,\r\n                        encodedValue\r\n                    }\r\n                })\r\n\r\n                this.addActions(actions, groupData) // Add actions to the group\r\n            }\r\n\r\n            // Handle equipped items separately for the \"Equipped\" group\r\n            const equippedActions = [...this.items].filter(([itemId]) => equippedItemIds.has(itemId)).map(([itemId, itemData]) => {\r\n                const id = itemId\r\n                const name = itemData.name\r\n                const description = itemData.system.description || ''\r\n                const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\r\n                const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}<br>${description}`\r\n                const encodedValue = [actionTypeId, id].join(this.delimiter)\r\n\r\n                return {\r\n                    id,\r\n                    name,\r\n                    listName,\r\n                    encodedValue\r\n                }\r\n            })\r\n\r\n            // Add equipped actions to the \"Equipped\" group\r\n            const equippedGroupData = { id: 'equipped', type: 'system' }\r\n            this.addActions(equippedActions, equippedGroupData)\r\n        }\r\n    }\r\n})\r\n","import { GROUP } from './constants.js'\r\n\r\n/**\r\n * Default layout and groups\r\n */\r\nexport let DEFAULTS = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    const groups = GROUP\r\n    Object.values(groups).forEach((group) => {\r\n        group.name = coreModule.api.Utils.i18n(group.name)\r\n        group.listName = `${game.i18n.localize(\r\n            'tokenActionHud.fu.group'\r\n        )}: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\r\n    })\r\n    const groupsArray = Object.values(groups)\r\n    console.info('Initializing token action hud layout for FU')\r\n    DEFAULTS = {\r\n        layout: [\r\n            // {\r\n            //     nestId: 'action',\r\n            //     id: 'action',\r\n            //     name: coreModule.api.Utils.i18n('Action'),\r\n            //     groups: [\r\n            //         { ...groups.check, nestId: 'action_check' },\r\n            //         { ...groups.action, nestId: 'action_action' }\r\n            //     ]\r\n            // },\r\n            {\r\n                nestId: 'attacks',\r\n                id: 'attacks',\r\n                name: coreModule.api.Utils.i18n('Attack'),\r\n                groups: [\r\n                    { ...groups.basic, nestId: 'feature_basic' },\r\n                    { ...groups.weapon, nestId: 'item_weapon' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'feature',\r\n                id: 'feature',\r\n                name: coreModule.api.Utils.i18n('Feature'),\r\n                groups: [\r\n                    { ...groups.basic, nestId: 'feature_basic' },\r\n                    { ...groups.skill, nestId: 'feature_skill' },\r\n                    { ...groups.spell, nestId: 'feature_spell' },\r\n                    { ...groups.miscAbility, nestId: 'feature_miscAbility' },\r\n                    { ...groups.rule, nestId: 'feature_rule' },\r\n                    { ...groups.ritual, nestId: 'feature_ritual' },\r\n                    { ...groups.project, nestId: 'feature_project' },\r\n                    { ...groups.classFeature, nestId: 'feature_classFeature' },\r\n                    { ...groups.optionalFeature, nestId: 'feature_optionalFeature' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'item',\r\n                id: 'item',\r\n                name: coreModule.api.Utils.i18n('Items'),\r\n                groups: [\r\n                    { ...groups.equipped, nestId: 'item_equipped' },\r\n                    { ...groups.weapon, nestId: 'item_weapon' },\r\n                    { ...groups.shield, nestId: 'item_shield' },\r\n                    { ...groups.armor, nestId: 'item_armor' },\r\n                    { ...groups.accessory, nestId: 'item_accessory' },\r\n                    { ...groups.consumable, nestId: 'item_consumable' },\r\n                    { ...groups.treasure, nestId: 'item_treasure' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'utility',\r\n                id: 'utility',\r\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\r\n                groups: [\r\n                    { ...groups.combat, nestId: 'utility_combat' },\r\n                    { ...groups.token, nestId: 'utility_token' },\r\n                    { ...groups.rests, nestId: 'utility_rests' },\r\n                    { ...groups.utility, nestId: 'utility_utility' }\r\n                ]\r\n            }\r\n        ],\r\n        groups: groupsArray\r\n    }\r\n})\r\n","export let RollHandler = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    /**\r\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\r\n     */\r\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\r\n        /**\r\n         * Handle action click\r\n         * Called by Token Action HUD Core when an action is left or right-clicked\r\n         * @override\r\n         * @param {object} event        The event\r\n         * @param {string} encodedValue The encoded value\r\n         */\r\n        async handleActionClick (event, encodedValue) {\r\n            const [actionTypeId, actionId] = encodedValue.split('|')\r\n\r\n            const isShift = this.shift\r\n\r\n            const renderable = ['item']\r\n\r\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\r\n                return this.doRenderItem(this.actor, actionId)\r\n            }\r\n\r\n            const knownCharacters = ['character']\r\n\r\n            // If single actor is selected\r\n            if (this.actor) {\r\n                await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId, isShift)\r\n                return\r\n            }\r\n\r\n            const controlledTokens = canvas.tokens.controlled\r\n                .filter((token) => knownCharacters.includes(token.actor?.type))\r\n\r\n            // If multiple actors are selected\r\n            for (const token of controlledTokens) {\r\n                const actor = token.actor\r\n                await this.#handleAction(event, actor, token, actionTypeId, actionId, isShift)\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handle action hover\r\n         * Called by Token Action HUD Core when an action is hovered on or off\r\n         * @override\r\n         * @param {object} event        The event\r\n         * @param {string} encodedValue The encoded value\r\n         */\r\n        async handleActionHover (event, encodedValue) {}\r\n\r\n        /**\r\n         * Handle group click\r\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\r\n         * @override\r\n         * @param {object} event The event\r\n         * @param {object} group The group\r\n         */\r\n        async handleGroupClick (event, group) {}\r\n\r\n        /**\r\n         * Handle action\r\n         * @private\r\n         * @param {object} event        The event\r\n         * @param {object} actor        The actor\r\n         * @param {object} token        The token\r\n         * @param {string} actionTypeId The action type id\r\n         * @param {string} actionId     The actionId\r\n         */\r\n        async #handleAction (event, actor, token, actionTypeId, actionId, isShift) {\r\n            switch (actionTypeId) {\r\n            case 'item':\r\n                this.#handleItemAction(event, actor, actionId)\r\n                break\r\n            case 'action':\r\n                this.#handleCombatAction(event, actor, actionId, isShift)\r\n                break\r\n            case 'utility':\r\n                this.#handleUtilityAction(token, actionId)\r\n                break\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handles combat actions\r\n         *\r\n         * @private\r\n         * @param {Event} event     The event\r\n         * @param {Object} actor    The actor\r\n         * @param {string} actionId The action type id\r\n         * @param {boolean} isShift Whether Shift key was pressed\r\n         *\r\n         * @returns {Promise<void>}\r\n         */\r\n        async #handleCombatAction (event, actor, actionId, isShift) {\r\n            const combatActionHandler = new game.projectfu.ActionHandler(actor)\r\n\r\n            switch (actionId) {\r\n            case 'equipmentAction':\r\n                await combatActionHandler.handleAction('equipmentAction', isShift)\r\n                break\r\n            case 'guardAction':\r\n                await combatActionHandler.handleAction('guardAction', isShift)\r\n                break\r\n            case 'hinderAction':\r\n                await combatActionHandler.handleAction('hinderAction', isShift)\r\n                break\r\n            case 'inventoryAction':\r\n                await combatActionHandler.handleAction('inventoryAction', isShift)\r\n                break\r\n            case 'objectiveAction':\r\n                await combatActionHandler.handleAction('objectiveAction', isShift)\r\n                break\r\n            case 'spellAction':\r\n                await combatActionHandler.handleAction('spellAction', isShift)\r\n                break\r\n            case 'studyAction':\r\n                await combatActionHandler.handleAction('studyAction', isShift)\r\n                break\r\n            case 'skillAction':\r\n                await combatActionHandler.handleAction('skillAction', isShift)\r\n                break\r\n            case 'attributeCheck':\r\n                Hooks.call('promptAttributeCheckCalled', actor)\r\n                break\r\n            case 'openCheck':\r\n                Hooks.call('promptOpenCheckCalled', actor)\r\n                break\r\n            case 'groupCheck':\r\n                Hooks.call('promptGroupCheckCalled', actor)\r\n                break\r\n            case 'initiativeCheck':\r\n                Hooks.call('promptInitiativeCheckCalled', actor)\r\n                break\r\n            case 'travelCheck':\r\n                game.lookfar.showTravelCheckDialog()\r\n                break\r\n            default:\r\n                console.warn(`Unknown action ID: ${actionId}`)\r\n                break\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handle item action\r\n         * @private\r\n         * @param {object} event    The event\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        #handleItemAction (event, actor, actionId) {\r\n            const item = actor.items.get(actionId)\r\n            item.roll()\r\n        }\r\n\r\n        /**\r\n         * Handle utility action\r\n         * @private\r\n         * @param {object} token    The token\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #handleUtilityAction (token, actionId) {\r\n            switch (actionId) {\r\n            case 'endTurn':\r\n                if (game.combat?.current?.tokenId === token.id) {\r\n                    await game.combat?.nextTurn()\r\n                }\r\n                break\r\n            }\r\n        }\r\n    }\r\n})\r\n","// import { MODULE } from './constants.js'\r\n\r\n/**\r\n * Register module settings\r\n * Called by Token Action HUD Core to register Token Action HUD system module settings\r\n * @param {function} coreUpdate Token Action HUD Core update function\r\n */\r\nexport function register (coreUpdate) {\r\n    // game.settings.register(MODULE.ID, 'displayUnequipped', {\r\n    //     name: game.i18n.localize('tokenActionHud.fu.settings.displayUnequipped.name'),\r\n    //     hint: game.i18n.localize('tokenActionHud.fu.settings.displayUnequipped.hint'\r\n    //     ),\r\n    //     scope: 'client',\r\n    //     config: true,\r\n    //     type: Boolean,\r\n    //     default: true,\r\n    //     onChange: (value) => {\r\n    //         coreUpdate(value)\r\n    //     }\r\n    // })\r\n}\r\n","// System Module Imports\r\nimport { ActionHandler } from './action-handler.js'\r\nimport { RollHandler as Core } from './roll-handler.js'\r\nimport { MODULE } from './constants.js'\r\nimport { DEFAULTS } from './defaults.js'\r\nimport * as systemSettings from './settings.js'\r\n\r\nexport let SystemManager = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    /**\r\n     * Extends Token Action HUD Core's SystemManager class\r\n     */\r\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\r\n        /**\r\n         * Returns an instance of the ActionHandler to Token Action HUD Core\r\n         * Called by Token Action HUD Core\r\n         * @override\r\n         * @returns {class} The ActionHandler instance\r\n         */\r\n        getActionHandler () {\r\n            return new ActionHandler()\r\n        }\r\n\r\n        /**\r\n         * Returns a list of roll handlers to Token Action HUD Core\r\n         * Used to populate the Roll Handler module setting choices\r\n         * Called by Token Action HUD Core\r\n         * @override\r\n         * @returns {object} The available roll handlers\r\n         */\r\n        getAvailableRollHandlers () {\r\n            const coreTitle = 'Fabula Ultima'\r\n            const choices = { core: coreTitle }\r\n            return choices\r\n        }\r\n\r\n        /**\r\n         * Returns an instance of the RollHandler to Token Action HUD Core\r\n         * Called by Token Action HUD Core\r\n         * @override\r\n         * @param {string} rollHandlerId The roll handler ID\r\n         * @returns {class}              The RollHandler instance\r\n         */\r\n        getRollHandler (rollHandlerId) {\r\n            let rollHandler\r\n            switch (rollHandlerId) {\r\n            case 'core':\r\n            default:\r\n                rollHandler = new Core()\r\n                break\r\n            }\r\n            return rollHandler\r\n        }\r\n\r\n        /**\r\n         * Returns the default layout and groups to Token Action HUD Core\r\n         * Called by Token Action HUD Core\r\n         * @returns {object} The default layout and groups\r\n         */\r\n        async registerDefaults () {\r\n            return DEFAULTS\r\n        }\r\n\r\n        /**\r\n         * Register Token Action HUD system module settings\r\n         * Called by Token Action HUD Core\r\n         * @override\r\n         * @param {function} coreUpdate The Token Action HUD Core update function\r\n         */\r\n        registerSettings (coreUpdate) {\r\n            systemSettings.register(coreUpdate)\r\n        }\r\n\r\n        /**\r\n         * Returns styles to Token Action HUD Core\r\n         * Called by Token Action HUD Core\r\n         * @override\r\n         * @returns {object} The TAH system styles\r\n         */\r\n        registerStyles () {\r\n            return {\r\n                template: {\r\n                    class: 'tah-style-fu-style', // The class to add to first DIV element\r\n                    file: 'tah-fu-style', // The file without the css extension\r\n                    moduleId: MODULE.ID, // The module ID\r\n                    name: 'PFU Style' // The name to display in the Token Action HUD Core 'Style' module setting\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { MODULE } from './constants.js'\r\n\r\nexport let Utils = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    /**\r\n     * Utility functions\r\n     */\r\n    Utils = class Utils {\r\n        /**\r\n         * Get setting\r\n         * @param {string} key               The key\r\n         * @param {string=null} defaultValue The default value\r\n         * @returns {string}                 The setting value\r\n         */\r\n        static getSetting (key, defaultValue = null) {\r\n            let value = defaultValue ?? null\r\n            try {\r\n                value = game.settings.get(MODULE.ID, key)\r\n            } catch {\r\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\r\n            }\r\n            return value\r\n        }\r\n\r\n        /**\r\n         * Set setting\r\n         * @param {string} key   The key\r\n         * @param {string} value The value\r\n         */\r\n        static async setSetting (key, value) {\r\n            try {\r\n                value = await game.settings.set(MODULE.ID, key, value)\r\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\r\n            } catch {\r\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\r\n            }\r\n        }\r\n    }\r\n})\r\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","basic","weapon","shield","armor","accessory","consumable","treasure","class","skill","heroic","spell","miscAbility","rule","behavior","ritual","project","classFeature","optionalFeature","effect","action","attack","equipment","guard","inventory","hinder","objective","study","check","travel","utility","GROUP","equipped","id","name","type","combat","token","ITEM_TYPE","groupId","ActionHandler","Hooks","once","async","coreModule","api","groupIds","this","actorType","actor","items","Utils","sortItemsByName","buildCharacterActions","buildNPCActions","buildMultipleTokenActions","buildCheckActions","buildCombatActions","buildItems","buildTravel","actionTypeId","actions","map","i18n","listName","encodedValue","join","delimiter","checkGroupData","addActions","combatGroupData","travelAction","travelGroupData","size","inventoryMap","Map","slots","equippedItemIds","Set","slot","equippedItemId","system","add","itemId","itemData","typeMap","get","set","groupData","description","actionTypeName","equippedActions","filter","has","DEFAULTS","groups","Object","values","forEach","group","game","localize","groupsArray","console","info","layout","nestId","rests","RollHandler","register","coreUpdate","event","actionId","split","isShift","shift","includes","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","handleItemAction","handleCombatAction","handleUtilityAction","combatActionHandler","projectfu","call","lookfar","showTravelCheckDialog","warn","roll","current","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","registerStyles","template","file","moduleId","static","key","defaultValue","value","settings","Logger","debug"],"mappings":"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"}