{"version":3,"file":"token-action-hud-fu.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","roll-handler.js","system-manager.js","backup/token-action-hud-template.min.js","settings.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'token-action-hud-fu'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '1.5'\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n    attack: 'tokenActionHud.attack',\n    equipment: 'tokenActionHud.equipment',\n    guard: 'tokenActionHud.guard',\n    utility: 'tokenActionHud.utility'\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    mainSlot: { id: 'mainSlot', name: 'tokenActionHud.fu.attack.mainSlot', type: 'system' },\n    offSlot: { id: 'offSlot', name: 'tokenActionHud.fu.attack.offSlot', type: 'system' },\n    armorSlot: { id: 'armorSlot', name: 'tokenActionHud.fu.attack.armorSlot', type: 'system' },\n    accessorySlot: { id: 'accessorySlot', name: 'tokenActionHud.fu.attack.accessorySlot', type: 'system' },\n\n    weapons: { id: 'weapons', name: 'tokenActionHud.fu.equipment.weapons', type: 'system' },\n    shields: { id: 'shields', name: 'tokenActionHud.fu.equipment.shields', type: 'system' },\n    armor: { id: 'armor', name: 'tokenActionHud.fu.equipment.armor', type: 'system' },\n    accessories: { id: 'accessories', name: 'tokenActionHud.fu.equipment.accessories', type: 'system' },\n    //consumables: { id: 'consumables', name: 'tokenActionHud.fu.equipment.consumables', type: 'system' },\n    //treasures: { id: 'treasures', name: 'tokenActionHud.fu.equipment.treasures', type: 'system' },\n\n\n    // Action Labels\n    spells: { id: 'spells', name: 'tokenActionHud.fu.spells.label', type: 'system' },\n    miscAbility: { id: 'abilities', name: 'tokenActionHud.fu.abilities.label', type: 'system' },\n\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    weapon: { groupId: 'weapons' },\n    shield: { groupId: 'shields' },\n    armor: { groupId: 'armor' },\n    accessory: { groupId: 'accessories' },\n    consumable: { groupId: 'consumables' },\n    treasure: { groupId: 'treasures' },\n    spell: { groupId: 'spells' },\n    miscAbility: { groupId: 'abilities' },\n}\n\n/**\n * Item types\n */\nexport const SLOT_TYPE = {\n    mainSlot: { groupId: 'mainSlot' },\n    offSlot: { groupId: 'offSlot' },\n    armorSlot: { groupId: 'armorSlot' },\n    accessorySlot: { groupId: 'accessorySlot' },\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE } from './constants.js'\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n     */\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        /**\n         * Build system actions\n         * Called by Token Action HUD Core\n         * @override\n         * @param {array} groupIds\n         */a\n        async buildSystemActions (groupIds) {\n            // Set actor and token variables\n            this.actors = (!this.actor) ? this._getActors() : [this.actor]\n            this.actorType = this.actor?.type\n\n            // Settings\n            this.displayUnequipped = Utils.getSetting('displayUnequipped')\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            if (this.actorType === 'character') {\n                this.#buildCharacterActions()\n            } else if (this.actorType === 'npc') {\n                this.#buildNPCActions()\n            } else if (!this.actor) {\n                this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        #buildCharacterActions () {\n            // this.#buildAttack()\n            this.#buildEquipment()\n            this.#buildSpell()\n            this.#buildTravel()\n        }\n        \n        /**\n         * Build npc actions\n         * @private\n         */\n        #buildNPCActions () {\n        //    this.#buildEquipment()\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        #buildMultipleTokenActions () {\n        }\n\n        /**\n         * Handle travel action click event\n         * @private\n         */\n        handleTravelActionClick() {\n            // Implement the logic to handle the click event for the travel action\n            showTravelCheckDialog();\n        }\n\n\n        /**\n         * Build inventory\n         * @private\n         */\n        async #buildEquipment () {\n            if (this.items.size === 0) return\n\n            const actionTypeId = 'equipment'\n            const equipmentMap = new Map()\n\n            for (const [itemId, itemData] of this.items) {\n                const type = itemData.type\n                const equipped = itemData.isEquipped\n\n                if (equipped || this.displayUnequipped) {\n                    const typeMap = equipmentMap.get(type) ?? new Map()\n                    typeMap.set(itemId, itemData)\n                    equipmentMap.set(type, typeMap)\n                }\n            }\n\n            for (const [type, typeMap] of equipmentMap) {\n                const groupId = ITEM_TYPE[type]?.groupId\n\n                if (!groupId) continue\n\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = [...typeMap].map(([itemId, itemData]) => {\n                    const id = itemId\n                    const name = itemData.name\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue\n                    }\n                })\n\n                // TAH Core method to add actions to the action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build attack action\n         * @private\n         */\n        async #buildSpell () {\n            if (this.items.size === 0) return\n\n            const actionTypeId = 'spell'\n            const equipmentMap = new Map()\n\n            for (const [itemId, itemData] of this.items) {\n                const type = itemData.type\n                const equipped = itemData.isEquipped\n\n                if (equipped || this.displayUnequipped) {\n                    const typeMap = equipmentMap.get(type) ?? new Map()\n                    typeMap.set(itemId, itemData)\n                    equipmentMap.set(type, typeMap)\n                }\n            }\n\n            for (const [type, typeMap] of equipmentMap) {\n                const groupId = ITEM_TYPE[type]?.groupId\n\n                if (!groupId) continue\n\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = [...typeMap].map(([itemId, itemData]) => {\n                    const id = itemId\n                    const name = itemData.name\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue\n                    }\n                })\n\n                // TAH Core method to add actions to the action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build travel roll action\n         * @private\n         */\n        async #buildTravel () {\n            const actionTypeId = 'travel';  // Replace 'travel' with the correct action type ID\n            const groupId = ITEM_TYPE['travel']?.groupId;  // Replace 'travel' with the correct type for the travel action\n\n            if (!groupId) return;\n\n            const groupData = { id: groupId, type: 'system' };\n\n            // Get actions\n            const actions = [{\n                id: 'travel',\n                name: 'Travel',\n                listName: 'Travel',  // You can customize the display name\n                encodedValue: [actionTypeId, 'travel'].join(this.delimiter)  // You may need to adjust this based on your needs\n            }];\n\n            // TAH Core method to add actions to the action list\n            this.addActions(actions, groupData);\n\n            // Add click event listener to the travel action\n            $(`#${groupData.id}`).click((ev) => {\n                ev.preventDefault();\n                this.handleTravelActionClick();\n            });\n        }\n\n        /**\n         * Build spell action\n         * @private\n         */\n        // async #buildAttack () {\n        //     if (this.items.size === 0) return\n\n        //     const actionTypeId = 'attack'\n        //     const equipmentMap = new Map()\n\n        //     for (const [itemId, itemData] of this.items) {\n        //         const type = itemData.type\n        //         const equipped = itemData.isEquipped\n\n        //         if (equipped || this.displayUnequipped) {\n        //             const typeMap = equipmentMap.get(type) ?? new Map()\n        //             typeMap.set(itemId, itemData)\n        //             equipmentMap.set(type, typeMap)\n        //         }\n        //     }\n\n        //     for (const [type, typeMap] of equipmentMap) {\n        //         const groupId = SLOT_TYPE[type]?.groupId\n\n        //         if (!groupId) continue\n\n        //         const groupData = { id: groupId, type: 'system' }\n\n        //         // Get actions\n        //         const actions = [...typeMap].map(([itemId, itemData]) => {\n        //             const id = itemId\n        //             const name = itemData.name\n        //             const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n        //             const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n        //             const encodedValue = [actionTypeId, id].join(this.delimiter)\n\n        //             return {\n        //                 id,\n        //                 name,\n        //                 listName,\n        //                 encodedValue\n        //             }\n        //         })\n\n        //         // TAH Core method to add actions to the action list\n        //         this.addActions(actions, groupData)\n        //     }\n        // }\n\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'attack',\n                id: 'attack',\n                name: coreModule.api.Utils.i18n('Attack'),\n                groups: [\n                    { ...groups.mainSlot, nestId: 'attack_mainSlot' },\n                    { ...groups.offSlot, nestId: 'attack_offSlot' },\n                    { ...groups.armorSlot, nestId: 'attack_armorSlot' },\n                    { ...groups.accessorySlot, nestId: 'attack_accessorySlot' },\n                ]\n            },\n            {\n                nestId: 'equipment',\n                id: 'equipment',\n                name: coreModule.api.Utils.i18n('Equipment'),\n                groups: [\n                    { ...groups.weapons, nestId: 'equipment_weapons' },\n                    { ...groups.shields, nestId: 'equipment_shields' },\n                    { ...groups.armor, nestId: 'equipment_armor' },\n                    { ...groups.accessories, nestId: 'equipment_accessories' },\n                    //{ ...groups.consumables, nestId: 'equipment_consumables' },\n                    //{ ...groups.treasures, nestId: 'equipment_treasures' }\n                ]\n            },\n            {\n                nestId: 'guard',\n                id: 'guard',\n                name: coreModule.api.Utils.i18n('Guard'),\n                groups: [\n                    { ...groups.weapons, nestId: 'equipment_weapons' },\n                ]\n            },\n            {\n                nestId: 'spell',\n                id: 'spell',\n                name: coreModule.api.Utils.i18n('Spell'),\n                groups: [\n                    { ...groups.spells, nestId: 'spell_name' },\n                ]\n            },\n            {\n                nestId: 'travel',\n                id: 'travel',\n                name: coreModule.api.Utils.i18n('Travel'),\n                groups: [\n                    { ...groups.travels, nestId: 'travel_name' },\n                ]\n            },\n            \n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n     */\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n        /**\n         * Handle action click\n         * Called by Token Action HUD Core when an action is left or right-clicked\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionClick (event, encodedValue) {\n            const [actionTypeId, actionId] = encodedValue.split('|')\n\n            const renderable = ['item']\n\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n                return this.doRenderItem(this.actor, actionId)\n            }\n\n            const knownCharacters = ['character']\n\n            // If single actor is selected\n            if (this.actor) {\n                await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId)\n                return\n            }\n\n            const controlledTokens = canvas.tokens.controlled\n                .filter((token) => knownCharacters.includes(token.actor?.type))\n\n            // If multiple actors are selected\n            for (const token of controlledTokens) {\n                const actor = token.actor\n                await this.#handleAction(event, actor, token, actionTypeId, actionId)\n            }\n        }\n\n        /**\n         * Handle action hover\n         * Called by Token Action HUD Core when an action is hovered on or off\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionHover (event, encodedValue) {}\n\n        /**\n         * Handle group click\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n         * @override\n         * @param {object} event The event\n         * @param {object} group The group\n         */\n        async handleGroupClick (event, group) {}\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event        The event\n         * @param {object} actor        The actor\n         * @param {object} token        The token\n         * @param {string} actionTypeId The action type id\n         * @param {string} actionId     The actionId\n         */\n        async #handleAction (event, actor, token, actionTypeId, actionId) {\n            switch (actionTypeId) {\n            case 'item':\n                this.#handleItemAction(event, actor, actionId)\n                break\n            case 'utility':\n                this.#handleUtilityAction(token, actionId)\n                break\n            }\n        }\n\n        /**\n         * Handle item action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleItemAction (event, actor, actionId) {\n            const item = actor.items.get(actionId)\n            item.toChat(event)\n        }\n\n        /**\n         * Handle utility action\n         * @private\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #handleUtilityAction (token, actionId) {\n            switch (actionId) {\n            case 'endTurn':\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler () {\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Core Template'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}              The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults () {\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        registerStyles () {\n            return {\n                template: {\n                    class: 'tah-style-fu-style', // The class to add to first DIV element\n                    file: 'tah-fu', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'Fabula Ultima Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","var t,e;(t=self.document)&&!t.getElementById(\"livereloadscript\")&&((e=t.createElement(\"script\")).async=1,e.src=\"//\"+(self.location.host||\"localhost\").split(\":\")[0]+\":9999/livereload.js?snipver=1\",e.id=\"livereloadscript\",t.getElementsByTagName(\"head\")[0].appendChild(e));const n={ID:\"token-action-hud-fu\"},i={ID:\"token-action-hud-core\"},o=\"1.5\",s={item:\"tokenActionHud.fu.item\",utility:\"tokenActionHud.utility\"},a={armor:{id:\"armor\",name:\"tokenActionHud.fu.armor\",type:\"system\"},equipment:{id:\"equipment\",name:\"tokenActionHud.fu.equipment\",type:\"system\"},consumables:{id:\"consumables\",name:\"tokenActionHud.fu.consumables\",type:\"system\"},containers:{id:\"containers\",name:\"tokenActionHud.fu.containers\",type:\"system\"},treasure:{id:\"treasure\",name:\"tokenActionHud.fu.treasure\",type:\"system\"},weapons:{id:\"weapons\",name:\"tokenActionHud.fu.weapons\",type:\"system\"},combat:{id:\"combat\",name:\"tokenActionHud.combat\",type:\"system\"},token:{id:\"token\",name:\"tokenActionHud.token\",type:\"system\"},utility:{id:\"utility\",name:\"tokenActionHud.utility\",type:\"system\"}},r={armor:{groupId:\"armor\"},backpack:{groupId:\"containers\"},consumable:{groupId:\"consumables\"},equipment:{groupId:\"equipment\"},treasure:{groupId:\"treasure\"},weapon:{groupId:\"weapons\"}};let c=null;Hooks.once(\"tokenActionHudCoreApiReady\",(async t=>{c=class Utils{static getSetting(e,i=null){let o=i??null;try{o=game.settings.get(n.ID,e)}catch{t.api.Logger.debug(`Setting '${e}' not found`)}return o}static async setSetting(e,i){try{i=await game.settings.set(n.ID,e,i),t.api.Logger.debug(`Setting '${e}' set to '${i}'`)}catch{t.api.Logger.debug(`Setting '${e}' not found`)}}}}));let l=null;Hooks.once(\"tokenActionHudCoreApiReady\",(async t=>{l=class ActionHandler extends t.api.ActionHandler{a;async buildSystemActions(t){this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=c.getSetting(\"displayUnequipped\"),this.actor,\"character\"===this.actorType?this.#t():\"npc\"===this.actorType?this.#e():this.actor||this.#n()}#t(){this.#i()}#e(){this.#i()}#n(){}async#i(){if(0===this.items.size)return;const e=\"item\",n=new Map;for(const[t,e]of this.items){const i=e.type;if(e.equipped||this.displayUnequipped){const o=n.get(i)??new Map;o.set(t,e),n.set(i,o)}}for(const[i,o]of n){const n=r[i]?.groupId;if(!n)continue;const a={id:n,type:\"system\"},c=[...o].map((([n,i])=>{const o=n,a=i.name,r=t.api.Utils.i18n(s[e]),c=`${r?`${r}: `:\"\"}${a}`,l=[e,o].join(this.delimiter);return{id:o,name:a,listName:c,encodedValue:l}}));this.addActions(c,a)}}}}));let d=null;Hooks.once(\"tokenActionHudCoreApiReady\",(async t=>{const e=a;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const n=Object.values(e);d={layout:[{nestId:\"inventory\",id:\"inventory\",name:t.api.Utils.i18n(\"Template.Inventory\"),groups:[{...e.weapons,nestId:\"inventory_weapons\"},{...e.armor,nestId:\"inventory_armor\"},{...e.equipment,nestId:\"inventory_equipment\"},{...e.consumables,nestId:\"inventory_consumables\"},{...e.containers,nestId:\"inventory_containers\"},{...e.treasure,nestId:\"inventory_treasure\"}]},{nestId:\"utility\",id:\"utility\",name:t.api.Utils.i18n(\"tokenActionHud.utility\"),groups:[{...e.combat,nestId:\"utility_combat\"},{...e.token,nestId:\"utility_token\"},{...e.rests,nestId:\"utility_rests\"},{...e.utility,nestId:\"utility_utility\"}]}],groups:n}}));let u=null;function register(t){game.settings.register(n.ID,\"displayUnequipped\",{name:game.i18n.localize(\"tokenActionHud.fu.settings.displayUnequipped.name\"),hint:game.i18n.localize(\"tokenActionHud.fu.settings.displayUnequipped.hint\"),scope:\"client\",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once(\"tokenActionHudCoreApiReady\",(async t=>{u=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const[n,i]=e.split(\"|\");if([\"item\"].includes(n)&&this.isRenderItem())return this.doRenderItem(this.actor,i);const o=[\"character\"];if(this.actor)return void await this.#o(t,this.actor,this.token,n,i);const s=canvas.tokens.controlled.filter((t=>o.includes(t.actor?.type)));for(const e of s){const o=e.actor;await this.#o(t,o,e,n,i)}}async handleActionHover(t,e){}async handleGroupClick(t,e){}async#o(t,e,n,i,o){switch(i){case\"item\":this.#s(t,e,o);break;case\"utility\":this.#a(n,o)}}#s(t,e,n){e.items.get(n).toChat(t)}async#a(t,e){if(\"endTurn\"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let p=null;Hooks.once(\"tokenActionHudCoreApiReady\",(async t=>{p=class SystemManager extends t.api.SystemManager{getActionHandler(){return new l}getAvailableRollHandlers(){return{core:\"Core Template\"}}getRollHandler(t){let e;return e=new u,e}async registerDefaults(){return d}registerSettings(t){register(t)}registerStyles(){return{template:{class:\"tah-style-template-style\",file:\"tah-template-style\",moduleId:n.ID,name:\"Template Style\"}}}}})),Hooks.on(\"tokenActionHudCoreApiReady\",(async()=>{const t=game.modules.get(n.ID);t.api={requiredCoreModuleVersion:\"1.5\",SystemManager:p},Hooks.call(\"tokenActionHudSystemReady\",t)}));export{s as ACTION_TYPE,l as ActionHandler,i as CORE_MODULE,d as DEFAULTS,a as GROUP,r as ITEM_TYPE,n as MODULE,o as REQUIRED_CORE_MODULE_VERSION,u as RollHandler,p as SystemManager,c as Utils,register};\n","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n    game.settings.register(MODULE.ID, 'displayUnequipped', {\n        name: game.i18n.localize('tokenActionHud.fu.settings.displayUnequipped.name'),\n        hint: game.i18n.localize('tokenActionHud.fu.settings.displayUnequipped.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            coreUpdate(value)\n        }\n    })\n}\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["MODULE","ACTION_TYPE","attack","equipment","guard","utility","GROUP","mainSlot","id","name","type","offSlot","armorSlot","accessorySlot","weapons","shields","armor","accessories","spells","miscAbility","combat","token","ITEM_TYPE","weapon","groupId","shield","accessory","consumable","treasure","spell","SLOT_TYPE","Utils","Hooks","once","async","coreModule","static","key","defaultValue","value","game","settings","get","api","Logger","debug","set","ActionHandler","a","groupIds","this","actors","actor","_getActors","actorType","displayUnequipped","getSetting","items","sortItemsByName","buildCharacterActions","buildNPCActions","buildMultipleTokenActions","buildEquipment","buildSpell","buildTravel","handleTravelActionClick","showTravelCheckDialog","size","actionTypeId","equipmentMap","Map","itemId","itemData","isEquipped","typeMap","groupData","actions","map","actionTypeName","i18n","listName","encodedValue","join","delimiter","addActions","$","click","ev","preventDefault","DEFAULTS","groups","Object","values","forEach","group","groupsArray","layout","nestId","travels","rests","RollHandler","event","actionId","split","includes","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","filter","handleItemAction","handleUtilityAction","toChat","current","tokenId","nextTurn","SystemManager","t","e","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","coreUpdate","register","localize","hint","scope","config","Boolean","default","onChange","systemSettings.register","registerStyles","template","class","file","moduleId","on","module","modules","requiredCoreModuleVersion","call","self","document","getElementById","createElement","src","location","host","getElementsByTagName","appendChild","n","s","item","consumables","containers","r","backpack","c","i","o","l","equipped","d","u","p"],"mappings":"qRAGO,MAAMA,EACL,sBAkBKC,EAAc,CACvBC,OAAQ,wBACRC,UAAW,2BACXC,MAAO,uBACPC,QAAS,0BAMAC,EAAQ,CACjBC,SAAU,CAAEC,GAAI,WAAYC,KAAM,oCAAqCC,KAAM,UAC7EC,QAAS,CAAEH,GAAI,UAAWC,KAAM,mCAAoCC,KAAM,UAC1EE,UAAW,CAAEJ,GAAI,YAAaC,KAAM,qCAAsCC,KAAM,UAChFG,cAAe,CAAEL,GAAI,gBAAiBC,KAAM,yCAA0CC,KAAM,UAE5FI,QAAS,CAAEN,GAAI,UAAWC,KAAM,sCAAuCC,KAAM,UAC7EK,QAAS,CAAEP,GAAI,UAAWC,KAAM,sCAAuCC,KAAM,UAC7EM,MAAO,CAAER,GAAI,QAASC,KAAM,oCAAqCC,KAAM,UACvEO,YAAa,CAAET,GAAI,cAAeC,KAAM,0CAA2CC,KAAM,UAMzFQ,OAAQ,CAAEV,GAAI,SAAUC,KAAM,iCAAkCC,KAAM,UACtES,YAAa,CAAEX,GAAI,YAAaC,KAAM,oCAAqCC,KAAM,UAEjFU,OAAQ,CAAEZ,GAAI,SAAUC,KAAM,wBAAyBC,KAAM,UAC7DW,MAAO,CAAEb,GAAI,QAASC,KAAM,uBAAwBC,KAAM,UAC1DL,QAAS,CAAEG,GAAI,UAAWC,KAAM,yBAA0BC,KAAM,WAMvDY,EAAY,CACrBC,OAAQ,CAAEC,QAAS,WACnBC,OAAQ,CAAED,QAAS,WACnBR,MAAO,CAAEQ,QAAS,SAClBE,UAAW,CAAEF,QAAS,eACtBG,WAAY,CAAEH,QAAS,eACvBI,SAAU,CAAEJ,QAAS,aACrBK,MAAO,CAAEL,QAAS,UAClBL,YAAa,CAAEK,QAAS,cAMfM,EAAY,CACrBvB,SAAU,CAAEiB,QAAS,YACrBb,QAAS,CAAEa,QAAS,WACpBZ,UAAW,CAAEY,QAAS,aACtBX,cAAe,CAAEW,QAAS,kBC1EvB,IAAIO,EAAQ,KAEnBC,MAAMC,KAAK,8BAA8BC,MAAOC,IAI5CJ,EAAQ,MAAMA,MAOVK,kBAAmBC,EAAKC,EAAe,MACnC,IAAIC,EAAQD,GAAgB,KAC5B,IACIC,EAAQC,KAAKC,SAASC,IAAI1C,EAAWqC,GACvC,MACEF,EAAWQ,IAAIC,OAAOC,MAAM,YAAYR,gBAE5C,OAAOE,EAQXH,wBAAyBC,EAAKE,GAC1B,IACIA,QAAcC,KAAKC,SAASK,IAAI9C,EAAWqC,EAAKE,GAChDJ,EAAWQ,IAAIC,OAAOC,MAAM,YAAYR,cAAgBE,MAC1D,MACEJ,EAAWQ,IAAIC,OAAOC,MAAM,YAAYR,sBC/BjD,IAAIU,EAAgB,KAE3Bf,MAAMC,KAAK,8BAA8BC,MAAOC,IAI5CY,EAAgB,MAAMA,sBAAsBZ,EAAWQ,IAAII,cAMpDC,EACHd,yBAA0Be,GAStB,GAPAC,KAAKC,OAAWD,KAAKE,MAA6B,CAACF,KAAKE,OAA1BF,KAAKG,aACnCH,KAAKI,UAAYJ,KAAKE,OAAO1C,KAG7BwC,KAAKK,kBAAoBxB,EAAMyB,WAAW,qBAGtCN,KAAKE,MAAO,CACZ,IAAIK,EAAQP,KAAKE,MAAMK,MACvBA,EAAQtB,EAAWQ,IAAIZ,MAAM2B,gBAAgBD,GAC7CP,KAAKO,MAAQA,EAGM,cAAnBP,KAAKI,UACLJ,MAAKS,IACqB,QAAnBT,KAAKI,UACZJ,MAAKU,IACGV,KAAKE,OACbF,MAAKW,IAQbF,KAEIT,MAAKY,IACLZ,MAAKa,IACLb,MAAKc,IAOTJ,MASAC,MAOAI,0BAEIC,wBAQJhC,UACI,GAAwB,IAApBgB,KAAKO,MAAMU,KAAY,OAE3B,MAAMC,EAAe,YACfC,EAAe,IAAIC,IAEzB,IAAK,MAAOC,EAAQC,KAAatB,KAAKO,MAAO,CACzC,MAAM/C,EAAO8D,EAAS9D,KAGtB,GAFiB8D,EAASC,YAEVvB,KAAKK,kBAAmB,CACpC,MAAMmB,EAAUL,EAAa3B,IAAIhC,IAAS,IAAI4D,IAC9CI,EAAQ5B,IAAIyB,EAAQC,GACpBH,EAAavB,IAAIpC,EAAMgE,IAI/B,IAAK,MAAOhE,EAAMgE,KAAYL,EAAc,CACxC,MAAM7C,EAAUF,EAAUZ,IAAOc,QAEjC,IAAKA,EAAS,SAEd,MAAMmD,EAAY,CAAEnE,GAAIgB,EAASd,KAAM,UAGjCkE,EAAU,IAAIF,GAASG,KAAI,EAAEN,EAAQC,MACvC,MAAMhE,EAAK+D,EACL9D,EAAO+D,EAAS/D,KAChBqE,EAAiB3C,EAAWQ,IAAIZ,MAAMgD,KAAK9E,EAAYmE,IACvDY,EAAW,GAAGF,EAAiB,GAAGA,MAAqB,KAAKrE,IAC5DwE,EAAe,CAACb,EAAc5D,GAAI0E,KAAKhC,KAAKiC,WAElD,MAAO,CACH3E,KACAC,OACAuE,WACAC,mBAKR/B,KAAKkC,WAAWR,EAASD,IAQjCzC,UACI,GAAwB,IAApBgB,KAAKO,MAAMU,KAAY,OAE3B,MAAMC,EAAe,QACfC,EAAe,IAAIC,IAEzB,IAAK,MAAOC,EAAQC,KAAatB,KAAKO,MAAO,CACzC,MAAM/C,EAAO8D,EAAS9D,KAGtB,GAFiB8D,EAASC,YAEVvB,KAAKK,kBAAmB,CACpC,MAAMmB,EAAUL,EAAa3B,IAAIhC,IAAS,IAAI4D,IAC9CI,EAAQ5B,IAAIyB,EAAQC,GACpBH,EAAavB,IAAIpC,EAAMgE,IAI/B,IAAK,MAAOhE,EAAMgE,KAAYL,EAAc,CACxC,MAAM7C,EAAUF,EAAUZ,IAAOc,QAEjC,IAAKA,EAAS,SAEd,MAAMmD,EAAY,CAAEnE,GAAIgB,EAASd,KAAM,UAGjCkE,EAAU,IAAIF,GAASG,KAAI,EAAEN,EAAQC,MACvC,MAAMhE,EAAK+D,EACL9D,EAAO+D,EAAS/D,KAChBqE,EAAiB3C,EAAWQ,IAAIZ,MAAMgD,KAAK9E,EAAYmE,IACvDY,EAAW,GAAGF,EAAiB,GAAGA,MAAqB,KAAKrE,IAC5DwE,EAAe,CAACb,EAAc5D,GAAI0E,KAAKhC,KAAKiC,WAElD,MAAO,CACH3E,KACAC,OACAuE,WACAC,mBAKR/B,KAAKkC,WAAWR,EAASD,IAQjCzC,UACI,MACMV,EAAUF,EAAkB,QAAGE,QAErC,IAAKA,EAAS,OAEd,MAAMmD,EAAY,CAAEnE,GAAIgB,EAASd,KAAM,UAGjCkE,EAAU,CAAC,CACbpE,GAAI,SACJC,KAAM,SACNuE,SAAU,SACVC,aAAc,CAZG,SAYY,UAAUC,KAAKhC,KAAKiC,aAIrDjC,KAAKkC,WAAWR,EAASD,GAGzBU,EAAE,IAAIV,EAAUnE,MAAM8E,OAAOC,IACzBA,EAAGC,iBACHtC,KAAKe,yBAAyB,SCrMvC,IAAIwB,EAAW,KAEtBzD,MAAMC,KAAK,8BAA8BC,MAAOC,IAC5C,MAAMuD,EAASpF,EACfqF,OAAOC,OAAOF,GAAQG,SAAQC,IAC1BA,EAAMrF,KAAO0B,EAAWQ,IAAIZ,MAAMgD,KAAKe,EAAMrF,MAC7CqF,EAAMd,SAAW,UAAU7C,EAAWQ,IAAIZ,MAAMgD,KAAKe,EAAMd,UAAYc,EAAMrF,WAEjF,MAAMsF,EAAcJ,OAAOC,OAAOF,GAClCD,EAAW,CACPO,OAAQ,CACJ,CACIC,OAAQ,SACRzF,GAAI,SACJC,KAAM0B,EAAWQ,IAAIZ,MAAMgD,KAAK,UAChCW,OAAQ,CACJ,IAAKA,EAAOnF,SAAU0F,OAAQ,mBAC9B,IAAKP,EAAO/E,QAASsF,OAAQ,kBAC7B,IAAKP,EAAO9E,UAAWqF,OAAQ,oBAC/B,IAAKP,EAAO7E,cAAeoF,OAAQ,0BAG3C,CACIA,OAAQ,YACRzF,GAAI,YACJC,KAAM0B,EAAWQ,IAAIZ,MAAMgD,KAAK,aAChCW,OAAQ,CACJ,IAAKA,EAAO5E,QAASmF,OAAQ,qBAC7B,IAAKP,EAAO3E,QAASkF,OAAQ,qBAC7B,IAAKP,EAAO1E,MAAOiF,OAAQ,mBAC3B,IAAKP,EAAOzE,YAAagF,OAAQ,2BAKzC,CACIA,OAAQ,QACRzF,GAAI,QACJC,KAAM0B,EAAWQ,IAAIZ,MAAMgD,KAAK,SAChCW,OAAQ,CACJ,IAAKA,EAAO5E,QAASmF,OAAQ,uBAGrC,CACIA,OAAQ,QACRzF,GAAI,QACJC,KAAM0B,EAAWQ,IAAIZ,MAAMgD,KAAK,SAChCW,OAAQ,CACJ,IAAKA,EAAOxE,OAAQ+E,OAAQ,gBAGpC,CACIA,OAAQ,SACRzF,GAAI,SACJC,KAAM0B,EAAWQ,IAAIZ,MAAMgD,KAAK,UAChCW,OAAQ,CACJ,IAAKA,EAAOQ,QAASD,OAAQ,iBAIrC,CACIA,OAAQ,UACRzF,GAAI,UACJC,KAAM0B,EAAWQ,IAAIZ,MAAMgD,KAAK,0BAChCW,OAAQ,CACJ,IAAKA,EAAOtE,OAAQ6E,OAAQ,kBAC5B,IAAKP,EAAOrE,MAAO4E,OAAQ,iBAC3B,IAAKP,EAAOS,MAAOF,OAAQ,iBAC3B,IAAKP,EAAOrF,QAAS4F,OAAQ,sBAIzCP,OAAQK,MC7ET,IAAIK,EAAc,KAEzBpE,MAAMC,KAAK,8BAA8BC,MAAOC,IAI5CiE,EAAc,MAAMA,oBAAoBjE,EAAWQ,IAAIyD,YAQnDlE,wBAAyBmE,EAAOpB,GAC5B,MAAOb,EAAckC,GAAYrB,EAAasB,MAAM,KAIpD,GAFmB,CAAC,QAELC,SAASpC,IAAiBlB,KAAKuD,eAC1C,OAAOvD,KAAKwD,aAAaxD,KAAKE,MAAOkD,GAGzC,MAAMK,EAAkB,CAAC,aAGzB,GAAIzD,KAAKE,MAEL,kBADMF,MAAK0D,EAAcP,EAAOnD,KAAKE,MAAOF,KAAK7B,MAAO+C,EAAckC,GAI1E,MAAMO,EAAmBC,OAAOC,OAAOC,WAClCC,QAAQ5F,GAAUsF,EAAgBH,SAASnF,EAAM+B,OAAO1C,QAG7D,IAAK,MAAMW,KAASwF,EAAkB,CAClC,MAAMzD,EAAQ/B,EAAM+B,YACdF,MAAK0D,EAAcP,EAAOjD,EAAO/B,EAAO+C,EAAckC,IAWpEpE,wBAAyBmE,EAAOpB,IAShC/C,uBAAwBmE,EAAOP,IAW/B5D,QAAqBmE,EAAOjD,EAAO/B,EAAO+C,EAAckC,GACpD,OAAQlC,GACR,IAAK,OACDlB,MAAKgE,EAAkBb,EAAOjD,EAAOkD,GACrC,MACJ,IAAK,UACDpD,MAAKiE,EAAqB9F,EAAOiF,IAYzCY,GAAmBb,EAAOjD,EAAOkD,GAChBlD,EAAMK,MAAMf,IAAI4D,GACxBc,OAAOf,GAShBnE,QAA4Bb,EAAOiF,GAC/B,GACK,YADGA,EAEA9D,KAAKpB,QAAQiG,SAASC,UAAYjG,EAAMb,UAClCgC,KAAKpB,QAAQmG,iBC9FhC,IAAIC,EAAgB,KCP3B,IAAIC,EAAEC,EDSN1F,MAAMC,KAAK,8BAA8BC,MAAOC,IAI5CqF,EAAgB,MAAMA,sBAAsBrF,EAAWQ,IAAI6E,cAOvDG,mBACI,OAAO,IAAI5E,EAUf6E,2BAGI,MADgB,CAAEC,KADA,iBAYtBC,eAAgBC,GACZ,IAAIC,EAOJ,OAHIA,EAAc,IAAIC,EAGfD,EAQX9F,yBACI,OAAOuD,EASXyC,iBAAkBC,IE/DnB,SAASC,WAAUD,GACtB3F,KAAKC,SAAS2F,SAASpI,EAAW,oBAAqB,CACnDS,KAAM+B,KAAKuC,KAAKsD,SAAS,qDACzBC,KAAM9F,KAAKuC,KAAKsD,SAAS,qDAEzBE,MAAO,SACPC,QAAQ,EACR9H,KAAM+H,QACNC,SAAS,EACTC,SAAWpG,IACP4F,EAAW5F,KAGvB,CFmDYqG,CAAwBT,GAS5BU,iBACI,MAAO,CACHC,SAAU,CACNC,MAAO,qBACPC,KAAM,SACNC,SAAUjJ,EACVS,KAAM,6BGnF1BuB,MAAMkH,GAAG,8BAA8BhH,UAInC,MAAMiH,EAAS3G,KAAK4G,QAAQ1G,IAAI1C,GAChCmJ,EAAOxG,IAAM,CACT0G,0BRQoC,MQPpC7B,iBAEJxF,MAAMsH,KAAK,4BAA6BH,OFZnC1B,EAAE8B,KAAKC,YAAY/B,EAAEgC,eAAe,uBAAuB/B,EAAED,EAAEiC,cAAc,WAAWxH,MAAM,EAAEwF,EAAEiC,IAAI,MAAMJ,KAAKK,SAASC,MAAM,aAAatD,MAAM,KAAK,GAAG,gCAAgCmB,EAAElH,GAAG,mBAAmBiH,EAAEqC,qBAAqB,QAAQ,GAAGC,YAAYrC,IAAS,MAACsC,EAAM,sBAA8DC,EAAE,CAACC,KAAK,yBAAyB7J,QAAQ,0BAA0B2C,EAAE,CAAChC,MAAM,CAACR,GAAG,QAAQC,KAAK,0BAA0BC,KAAK,UAAUP,UAAU,CAACK,GAAG,YAAYC,KAAK,8BAA8BC,KAAK,UAAUyJ,YAAY,CAAC3J,GAAG,cAAcC,KAAK,gCAAgCC,KAAK,UAAU0J,WAAW,CAAC5J,GAAG,aAAaC,KAAK,+BAA+BC,KAAK,UAAUkB,SAAS,CAACpB,GAAG,WAAWC,KAAK,6BAA6BC,KAAK,UAAUI,QAAQ,CAACN,GAAG,UAAUC,KAAK,4BAA4BC,KAAK,UAAUU,OAAO,CAACZ,GAAG,SAASC,KAAK,wBAAwBC,KAAK,UAAUW,MAAM,CAACb,GAAG,QAAQC,KAAK,uBAAuBC,KAAK,UAAUL,QAAQ,CAACG,GAAG,UAAUC,KAAK,yBAAyBC,KAAK,WAAW2J,EAAE,CAACrJ,MAAM,CAACQ,QAAQ,SAAS8I,SAAS,CAAC9I,QAAQ,cAAcG,WAAW,CAACH,QAAQ,eAAerB,UAAU,CAACqB,QAAQ,aAAaI,SAAS,CAACJ,QAAQ,YAAYD,OAAO,CAACC,QAAQ,YAAY,IAAI+I,EAAE,KAAKvI,MAAMC,KAAK,oCAA8BC,IAAUqI,EAAE,MAAMxI,MAAMK,kBAAkBsF,EAAE8C,EAAE,MAAM,IAAIC,EAAED,GAAG,KAAK,IAAIC,EAAEjI,KAAKC,SAASC,IAAIsH,EAAKtC,EAAuD,CAApD,MAAMD,EAAE9E,IAAIC,OAAOC,MAAM,YAAY6E,eAAe,CAAC,OAAO+C,CAAC,CAACrI,wBAAwBsF,EAAE8C,GAAG,IAAIA,QAAQhI,KAAKC,SAASK,IAAIkH,EAAKtC,EAAE8C,GAAG/C,EAAE9E,IAAIC,OAAOC,MAAM,YAAY6E,cAAc8C,KAA0D,CAApD,MAAM/C,EAAE9E,IAAIC,OAAOC,MAAM,YAAY6E,eAAe,CAAC,EAAG,IAAG,IAAIgD,EAAE,KAAK1I,MAAMC,KAAK,oCAA8BC,IAAUwI,EAAE,MAAM3H,sBAAsB0E,EAAE9E,IAAII,cAAcC,EAAEd,yBAAyBuF,GAAGvE,KAAKC,OAAOD,KAAKE,MAAM,CAACF,KAAKE,OAAOF,KAAKG,aAAaH,KAAKI,UAAUJ,KAAKE,OAAO1C,KAAKwC,KAAKK,kBAAkBgH,EAAE/G,WAAW,qBAAqBN,KAAKE,MAAM,cAAcF,KAAKI,UAAUJ,MAAKuE,IAAK,QAAQvE,KAAKI,UAAUJ,MAAKwE,IAAKxE,KAAKE,OAAOF,MAAK8G,GAAI,CAACvC,KAAKvE,MAAKsH,GAAI,CAAC9C,KAAKxE,MAAKsH,GAAI,CAACR,MAAM9H,UAAU,GAAG,IAAIgB,KAAKO,MAAMU,KAAK,OAAO,MAAMuD,EAAE,OAAOsC,EAAE,IAAI1F,IAAI,IAAI,MAAMmD,EAAEC,KAAKxE,KAAKO,MAAM,CAAC,MAAM+G,EAAE9C,EAAEhH,KAAK,GAAGgH,EAAEiD,UAAUzH,KAAKK,kBAAkB,CAAC,MAAMkH,EAAET,EAAEtH,IAAI8H,IAAI,IAAIlG,IAAImG,EAAE3H,IAAI2E,EAAEC,GAAGsC,EAAElH,IAAI0H,EAAEC,EAAE,CAAC,CAAC,IAAI,MAAMD,EAAEC,KAAKT,EAAE,CAAC,MAAMA,EAAEK,EAAEG,IAAIhJ,QAAQ,IAAIwI,EAAE,SAAS,MAAMhH,EAAE,CAACxC,GAAGwJ,EAAEtJ,KAAK,UAAU6J,EAAE,IAAIE,GAAG5F,OAAOmF,EAAEQ,MAAM,MAAMC,EAAET,EAAEhH,EAAEwH,EAAE/J,KAAK4J,EAAE5C,EAAE9E,IAAIZ,MAAMgD,KAAKkF,EAAEvC,IAAI6C,EAAE,GAAGF,EAAE,GAAGA,MAAM,KAAKrH,IAAI0H,EAAE,CAAChD,EAAE+C,GAAGvF,KAAKhC,KAAKiC,WAAW,MAAM,CAAC3E,GAAGiK,EAAEhK,KAAKuC,EAAEgC,SAASuF,EAAEtF,aAAayF,EAAG,IAAGxH,KAAKkC,WAAWmF,EAAEvH,EAAE,CAAC,EAAG,IAAG,IAAI4H,EAAE,KAAK5I,MAAMC,KAAK,oCAA8BC,IAAU,MAAMwF,EAAE1E,EAAE2C,OAAOC,OAAO8B,GAAG7B,SAAS6B,IAAIA,EAAEjH,KAAKgH,EAAE9E,IAAIZ,MAAMgD,KAAK2C,EAAEjH,MAAMiH,EAAE1C,SAAS,UAAUyC,EAAE9E,IAAIZ,MAAMgD,KAAK2C,EAAE1C,UAAU0C,EAAEjH,OAAQ,IAAG,MAAMuJ,EAAErE,OAAOC,OAAO8B,GAAGkD,EAAE,CAAC5E,OAAO,CAAC,CAACC,OAAO,YAAYzF,GAAG,YAAYC,KAAKgH,EAAE9E,IAAIZ,MAAMgD,KAAK,sBAAsBW,OAAO,CAAC,IAAIgC,EAAE5G,QAAQmF,OAAO,qBAAqB,IAAIyB,EAAE1G,MAAMiF,OAAO,mBAAmB,IAAIyB,EAAEvH,UAAU8F,OAAO,uBAAuB,IAAIyB,EAAEyC,YAAYlE,OAAO,yBAAyB,IAAIyB,EAAE0C,WAAWnE,OAAO,wBAAwB,IAAIyB,EAAE9F,SAASqE,OAAO,wBAAwB,CAACA,OAAO,UAAUzF,GAAG,UAAUC,KAAKgH,EAAE9E,IAAIZ,MAAMgD,KAAK,0BAA0BW,OAAO,CAAC,IAAIgC,EAAEtG,OAAO6E,OAAO,kBAAkB,IAAIyB,EAAErG,MAAM4E,OAAO,iBAAiB,IAAIyB,EAAEvB,MAAMF,OAAO,iBAAiB,IAAIyB,EAAErH,QAAQ4F,OAAO,sBAAsBP,OAAOsE,EAAG,IAAG,IAAIa,EAAE,KAA2S7I,MAAMC,KAAK,oCAA8BC,IAAU2I,EAAE,MAAMzE,oBAAoBqB,EAAE9E,IAAIyD,YAAYlE,wBAAwBuF,EAAEC,GAAG,MAAMsC,EAAEQ,GAAG9C,EAAEnB,MAAM,KAAK,GAAG,CAAC,QAAQC,SAASwD,IAAI9G,KAAKuD,eAAe,OAAOvD,KAAKwD,aAAaxD,KAAKE,MAAMoH,GAAG,MAAMC,EAAE,CAAC,aAAa,GAAGvH,KAAKE,MAAM,kBAAkBF,MAAKuH,EAAGhD,EAAEvE,KAAKE,MAAMF,KAAK7B,MAAM2I,EAAEQ,GAAG,MAAMP,EAAEnD,OAAOC,OAAOC,WAAWC,QAAQQ,GAAGgD,EAAEjE,SAASiB,EAAErE,OAAO1C,QAAQ,IAAI,MAAMgH,KAAKuC,EAAE,CAAC,MAAMQ,EAAE/C,EAAEtE,YAAYF,MAAKuH,EAAGhD,EAAEgD,EAAE/C,EAAEsC,EAAEQ,EAAE,CAAC,CAACtI,wBAAwBuF,EAAEC,IAAIxF,uBAAuBuF,EAAEC,IAAIxF,QAAQuF,EAAEC,EAAEsC,EAAEQ,EAAEC,GAAG,OAAOD,GAAG,IAAI,OAAOtH,MAAK+G,EAAGxC,EAAEC,EAAE+C,GAAG,MAAM,IAAI,UAAUvH,MAAKF,EAAGgH,EAAES,GAAG,CAACR,GAAGxC,EAAEC,EAAEsC,GAAGtC,EAAEjE,MAAMf,IAAIsH,GAAG5C,OAAOK,EAAE,CAACvF,QAAQuF,EAAEC,GAAM,YAAYA,GAAElF,KAAKpB,QAAQiG,SAASC,UAAUG,EAAEjH,UAAUgC,KAAKpB,QAAQmG,WAAW,EAAG,IAAG,IAAIuD,EAAE,KAAK9I,MAAMC,KAAK,oCAA8BC,IAAU4I,EAAE,MAAMtD,sBAAsBC,EAAE9E,IAAI6E,cAAcG,mBAAmB,OAAO,IAAI+C,CAAC,CAAC9C,2BAA2B,MAAM,CAACC,KAAK,gBAAgB,CAACC,eAAeL,GAAG,IAAIC,EAAE,OAAOA,EAAE,IAAImD,EAAEnD,CAAC,CAACxF,yBAAyB,OAAO0I,CAAC,CAAC1C,iBAAiBT,IAAlzC,SAASW,SAASX,GAAGjF,KAAKC,SAAS2F,SAAS4B,EAAK,oBAAoB,CAACvJ,KAAK+B,KAAKuC,KAAKsD,SAAS,qDAAqDC,KAAK9F,KAAKuC,KAAKsD,SAAS,qDAAqDE,MAAM,SAASC,QAAO,EAAG9H,KAAK+H,QAAQC,SAAQ,EAAGC,SAASjB,IAAID,EAAEC,KAAK,CAAghCU,CAASX,EAAE,CAACoB,iBAAiB,MAAM,CAACC,SAAS,CAACC,MAAM,2BAA2BC,KAAK,qBAAqBC,SAASe,EAAKvJ,KAAK,kBAAkB,EAAG,IAAGuB,MAAMkH,GAAG,wCAAwC,MAAMzB,EAAEjF,KAAK4G,QAAQ1G,IAAIsH,GAAMvC,EAAE9E,IAAI,CAAC0G,0BAA0B,MAAM7B,cAAcsD,GAAG9I,MAAMsH,KAAK,4BAA4B7B,EAAG"}