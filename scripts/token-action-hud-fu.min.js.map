{"version":3,"file":"token-action-hud-fu.min.js","sources":["constants.js","action-handler.js","defaults.js","settings.js","roll-handler.js","system-manager.js","utils.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'token-action-hud-fu'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0'\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n    basic: 'TYPES.Item.basic',\n    weapon: 'TYPES.Item.weapon',\n    shield: 'TYPES.Item.shield',\n    armor: 'TYPES.Item.armor',\n    accessory: 'TYPES.Item.accessory',\n    consumable: 'TYPES.Item.consumable',\n    treasure: 'TYPES.Item.treasure',\n    class: 'TYPES.Item.class',\n    skill: 'TYPES.Item.skill',\n    heroic: 'TYPES.Item.heroic',\n    spell: 'TYPES.Item.spell',\n    miscAbility: 'TYPES.Item.miscAbility',\n    rule: 'TYPES.Item.rule',\n    behavior: 'TYPES.Item.behavior',\n    ritual: 'TYPES.Item.ritual',\n    project: 'TYPES.Item.project',\n    classFeature: 'TYPES.Item.classFeature',\n    optionalFeature: 'TYPES.Item.optionalFeature',\n    effect: 'TYPES.Item.effect',\n\n    action: 'FU.Action',\n    attack: 'FU.Attack',\n    equipment: 'FU.Equipment',\n    guard: 'FU.Guard',\n    inventory: 'FU.Inventory',\n    hinder: 'FU.Hinder',\n    objective: 'FU.Objective',\n    study: 'FU.Study',\n\n    check: 'tokenActionHud.fu.check.label',\n    travel: 'tokenActionHud.fu.check.travelcheck',\n    utility: 'tokenActionHud.utility'\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n\n    equipped: { id: 'equipped', name: 'tokenActionHud.fu.equipped.label', type: 'system' },\n    basic: { id: 'basic', name: 'TYPES.Item.basic', type: 'system' },\n    weapon: { id: 'weapon', name: 'TYPES.Item.weapon', type: 'system' },\n    shield: { id: 'shield', name: 'TYPES.Item.shield', type: 'system' },\n    armor: { id: 'armor', name: 'TYPES.Item.armor', type: 'system' },\n    accessory: { id: 'accessory', name: 'TYPES.Item.accessory', type: 'system' },\n    consumable: { id: 'consumable', name: 'TYPES.Item.consumable', type: 'system' },\n    treasure: { id: 'treasure', name: 'TYPES.Item.treasure', type: 'system' },\n    class: { id: 'class', name: 'TYPES.Item.class', type: 'system' },\n    skill: { id: 'skill', name: 'TYPES.Item.skill', type: 'system' },\n    heroic: { id: 'heroic', name: 'TYPES.Item.heroic', type: 'system' },\n    miscAbility: { id: 'miscAbility', name: 'TYPES.Item.miscAbility', type: 'system' },\n    rule: { id: 'rule', name: 'TYPES.Item.rule', type: 'system' },\n    behavior: { id: 'behavior', name: 'TYPES.Item.behavior', type: 'system' },\n    spell: { id: 'spell', name: 'TYPES.Item.spell', type: 'system' },\n    ritual: { id: 'ritual', name: 'TYPES.Item.ritual', type: 'system' },\n    project: { id: 'project', name: 'TYPES.Item.project', type: 'system' },\n    classFeature: { id: 'classFeature', name: 'TYPES.Item.classFeature', type: 'system' },\n    optionalFeature: { id: 'optionalFeature', name: 'TYPES.Item.optionalFeature', type: 'system' },\n    effect: { id: 'effect', name: 'TYPES.Item.effect', type: 'system' },\n\n    // Action Labels\n    check: { id: 'check', name: 'tokenActionHud.fu.check.label', type: 'system' },\n    action: { id: 'action', name: 'FU.Actions', type: 'system' },\n    attack: { id: 'attack', name: 'FU.attack', type: 'system' },\n    equipment: { id: 'equipment', name: 'FU.equipment', type: 'system' },\n    guard: { id: 'guard', name: 'FU.guard', type: 'system' },\n    inventory: { id: 'inventory', name: 'FU.inventory', type: 'system' },\n    hinder: { id: 'hinder', name: 'FU.hinder', type: 'system' },\n    objective: { id: 'objective', name: 'FU.objective', type: 'system' },\n    study: { id: 'study', name: 'FU.study', type: 'system' },\n\n    // Utility Labels\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' },\n\n    // Effects\n    temporaryEffect: { id: 'temporaryEffect', name: 'FU.TemporaryEffects', type: 'system' },\n    passiveEffect: { id: 'passiveEffect', name: 'FU.PassiveEffects', type: 'system' },\n    inactiveEffect: { id: 'inactiveEffect', name: 'FU.InactiveEffects', type: 'system' },\n\n    // Downtime\n    downtime: { id: 'downtime', name: 'FU.Downtime', type: 'system' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    basic: { groupId: 'basic' },\n    weapon: { groupId: 'weapon' },\n    shield: { groupId: 'shield' },\n    armor: { groupId: 'armor' },\n    accessory: { groupId: 'accessory' },\n    consumable: { groupId: 'consumable' },\n    treasure: { groupId: 'treasure' },\n    class: { groupId: 'class' },\n    skill: { groupId: 'skill' },\n    heroic: { groupId: 'heroic' },\n    miscAbility: { groupId: 'miscAbility' },\n    rule: { groupId: 'rule' },\n    spell: { groupId: 'spell' },\n    ritual: { groupId: 'ritual' },\n    project: { groupId: 'project' },\n    classFeature: { groupId: 'classFeature' },\n    optionalFeature: { groupId: 'optionalFeature' },\n    effect: { groupId: 'effect' }\n}\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE } from './constants.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n     * @remarks https://github.com/Larkinabout/fvtt-token-action-hud-core/wiki/Core-Changes-for-System-Module-Developers\n     */\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        /**\n         * Build system actions\n         * Called by Token Action HUD Core\n         * @override\n         */\n        async buildSystemActions () {\n            this.actorType = this.actor?.type\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n                this.effects = this.actor.effects\n            }\n\n            if (this.actorType === 'character') {\n                this.#buildCharacterActions()\n            } else if (this.actorType === 'npc') {\n                this.#buildNPCActions()\n            } else if (!this.actor) {\n                this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        #buildCharacterActions () {\n            this.#buildCheckActions()\n            this.#buildCombatActions()\n            this.#buildItems()\n            // this.#buildTravel()\n            this.#buildEffects()\n            this.#buildDowntimeActions()\n        }\n\n        /**\n         * Build npc actions\n         * @private\n         */\n        #buildNPCActions () {\n            this.#buildCheckActions()\n            this.#buildCombatActions()\n            this.#buildItems()\n            this.#buildEffects()\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        #buildMultipleTokenActions () {\n        }\n\n        /**\n         * Build Check Action actions for the HUD\n         *\n         * This method will create buttons for each checks action type.\n         * @private\n         */\n        async #buildCheckActions () {\n            const checkActions = [\n                { id: 'attributeCheck', name: 'Attribute Check' },\n                { id: 'openCheck', name: 'Open Check' },\n                { id: 'groupCheck', name: 'Group Check' },\n                { id: 'initiativeCheck', name: 'Initiative Check' }\n            ]\n\n            const actionTypeId = 'action'\n            const checkGroupId = 'check'\n\n            const actions = checkActions.map(action => {\n                return {\n                    id: action.id,\n                    name: coreModule.api.Utils.i18n(action.name),\n                    listName: action.name,\n                    encodedValue: [actionTypeId, action.id].join(this.delimiter) // Ensure delimiter is defined\n                }\n            })\n\n            const checkGroupData = { id: checkGroupId, type: 'system' }\n            this.addActions(actions, checkGroupData)\n        }\n\n        /**\n         * Build Combat Action actions for the HUD\n         *\n         * This method will create buttons for each combat action type.\n         * @private\n         */\n        async #buildCombatActions () {\n            const combatActions = [\n                { id: 'guardAction', name: 'Guard' },\n                { id: 'equipmentAction', name: 'Equipment' },\n                { id: 'hinderAction', name: 'Hinder' },\n                { id: 'inventoryAction', name: 'Inventory' },\n                { id: 'objectiveAction', name: 'Objective' },\n                { id: 'spellAction', name: 'Spell' },\n                { id: 'studyAction', name: 'Study' },\n                { id: 'skillAction', name: 'Skill' }\n            ]\n\n            const actionTypeId = 'action'\n            const combatGroupId = 'action' // Group ID for combat actions\n\n            const actions = combatActions.map(action => {\n                return {\n                    id: action.id,\n                    name: coreModule.api.Utils.i18n(action.name),\n                    listName: action.name,\n                    encodedValue: [actionTypeId, action.id].join(this.delimiter) // Ensure delimiter is defined\n                }\n            })\n\n            const combatGroupData = { id: combatGroupId, type: 'system' }\n            this.addActions(actions, combatGroupData)\n        }\n\n        /**\n         * Build Travel Action actions for the HUD\n         *\n         * This method handle the construction of action buttons for all combat actions.\n         *\n         * @private\n         */\n        async #buildTravel () {\n            const actionTypeId = 'action' // Action type identifier\n            const travelGroupId = 'check' // Group ID for the travel actions\n\n            // Define the travel action button\n            const travelAction = {\n                id: 'travelAction',\n                name: coreModule.api.Utils.i18n('Travel Check'), // Label for the action button\n                listName: 'Travel Check', // Tooltip or extended name\n                encodedValue: [actionTypeId, 'travelCheck'].join(this.delimiter) // Encoded value for the action\n            }\n\n            // Add the travel action to the \"Travel\" group\n            const travelGroupData = { id: travelGroupId, type: 'system' }\n            this.addActions([travelAction], travelGroupData)\n        }\n\n        /**\n         * @description Active Effects on the actor\n         * @returns {Promise<void>}\n         */\n        async #buildEffects () {\n            const typeId = 'effect'\n            const tempGroupId = 'temporaryEffect'\n            const passiveGroupId = 'passiveEffect'\n            const inactiveGroupId = 'inactiveEffect'\n\n            const getAction = (effect) => {\n                return {\n                    id: effect.id,\n                    name: coreModule.api.Utils.i18n(effect.name),\n                    listName: effect.name,\n                    img: coreModule.api.Utils.getImage(effect),\n                    encodedValue: [typeId, effect.id].join(this.delimiter) // Ensure delimiter is defined\n                }\n            }\n\n            /**\n             * @param {Object[]} actions\n             * @param {String} groupId\n             */\n            const addEffectGroup = (actions, groupId) => {\n                const groupData = { id: groupId, type: 'system' }\n                this.addActions(actions, groupData)\n            }\n\n            // Prepare active effects\n            const effects = this.actor.effectCategories\n            const temporaryEffects = effects.temporary.effects.map(getAction)\n            const passiveEffects = effects.passive.effects.map(getAction)\n            const inactiveEffects = effects.inactive.effects.map(getAction)\n\n            addEffectGroup(temporaryEffects, tempGroupId)\n            addEffectGroup(passiveEffects, passiveGroupId)\n            addEffectGroup(inactiveEffects, inactiveGroupId)\n        }\n\n        /**\n         * @description Active Effects on the actor\n         * @returns {Promise<void>}\n         */\n        async #buildDowntimeActions () {\n            const actionTypeId = 'utility'\n            const groupId = 'downtime'\n\n            const restAction = {\n                id: 'rest',\n                name: coreModule.api.Utils.i18n('Rest'),\n                listName: 'Rest',\n                encodedValue: [actionTypeId, 'rest'].join(this.delimiter)\n            }\n\n            // Add the travel action to the \"Travel\" group\n            const groupData = { id: groupId, type: 'system' }\n            this.addActions([restAction], groupData)\n        }\n\n        /**\n         * Build Inventory Actions for the HUD, including equipped items.\n         * @private\n         *\n         * This method handle the construction of action buttons for items in the actor's\n         * inventory, organized by equipment slots.\n         */\n        async #buildItems () {\n            // Exit if the actor has no items\n            if (this.items.size === 0) return\n\n            const actionTypeId = 'item' // Action type identifier\n            const inventoryMap = new Map() // Map for categorized inventory items\n\n            // Equipment slots\n            const slots = ['mainHand', 'offHand', 'phantom', 'armor', 'accessory', 'arcanum']\n            const equippedItemIds = new Set() // Store equipped item IDs\n\n            for (const slot of slots) {\n                const equippedItemId = this.actor.system.equipped[slot]\n                if (equippedItemId) equippedItemIds.add(equippedItemId)\n            }\n\n            // Categorize items in the inventory\n            for (const [itemId, itemData] of this.items) {\n                if (itemData.type === 'weapon' && this.actorType === 'npc') {\n                    continue\n                }\n                const typeMap = inventoryMap.get(itemData.type) ?? new Map()\n                typeMap.set(itemId, itemData)\n                inventoryMap.set(itemData.type, typeMap)\n            }\n\n            // Create action buttons for each item type\n            for (const [type, typeMap] of inventoryMap) {\n                const groupId = ITEM_TYPE[type]?.groupId\n                if (!groupId) continue // Skip if no group ID\n\n                const groupData = { id: groupId, type: 'system' } // Group data for the item type\n\n                // Generate actions for items in this type\n                const actions = [...typeMap].map(([itemId, itemData]) => {\n                    const id = itemId\n                    const name = itemData.name\n                    const description = itemData.system.description || ''\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}<br>${description}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n                    const img = coreModule.api.Utils.getImage(itemData)\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        img,\n                        encodedValue\n                    }\n                })\n\n                this.addActions(actions, groupData) // Add actions to the group\n            }\n\n            // Handle equipped items separately for the \"Equipped\" group\n            const equippedActions = [...this.items].filter(([itemId]) => equippedItemIds.has(itemId)).map(([itemId, itemData]) => {\n                const id = itemId\n                const name = itemData.name\n                const description = itemData.system.description || ''\n                const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}<br>${description}`\n                const encodedValue = [actionTypeId, id].join(this.delimiter)\n                const img = coreModule.api.Utils.getImage(itemData)\n\n                return {\n                    id,\n                    name,\n                    listName,\n                    img,\n                    encodedValue\n                }\n            })\n\n            // Add equipped actions to the \"Equipped\" group\n            const equippedGroupData = { id: 'equipped', type: 'system' }\n            this.addActions(equippedActions, equippedGroupData)\n        }\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach((group) => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `${game.i18n.localize(\n            'tokenActionHud.fu.group'\n        )}: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    console.info('Initializing token action hud layout for FU')\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'action',\n                id: 'action',\n                name: coreModule.api.Utils.i18n('Action'),\n                groups: [\n                    { ...groups.check, nestId: 'action_check' },\n                    { ...groups.action, nestId: 'action_action' }\n                ]\n            },\n            {\n                nestId: 'attack',\n                id: 'attack',\n                name: coreModule.api.Utils.i18n('Attack'),\n                groups: [\n                    { ...groups.basic, nestId: 'attack_basic' },\n                    { ...groups.weapon, nestId: 'attack_weapon' }\n                ]\n            },\n            {\n                nestId: 'feature',\n                id: 'feature',\n                name: coreModule.api.Utils.i18n('Feature'),\n                groups: [\n                    { ...groups.skill, nestId: 'feature_skill' },\n                    { ...groups.miscAbility, nestId: 'feature_miscAbility' },\n                    { ...groups.rule, nestId: 'feature_rule' },\n                    { ...groups.ritual, nestId: 'feature_ritual' },\n                    { ...groups.project, nestId: 'feature_project' },\n                    { ...groups.classFeature, nestId: 'feature_classFeature' },\n                    { ...groups.optionalFeature, nestId: 'feature_optionalFeature' }\n                ]\n            },\n            {\n                nestId: 'spell',\n                id: 'spell',\n                name: coreModule.api.Utils.i18n('Spell'),\n                groups: [\n                    { ...groups.spell, nestId: 'spell_spell' },\n                    { ...groups.ritual, nestId: 'spell_ritual' }\n                ]\n            },\n            {\n                nestId: 'item',\n                id: 'item',\n                name: coreModule.api.Utils.i18n('Items'),\n                groups: [\n                    { ...groups.equipped, nestId: 'item_equipped' },\n                    { ...groups.shield, nestId: 'item_shield' },\n                    { ...groups.armor, nestId: 'item_armor' },\n                    { ...groups.accessory, nestId: 'item_accessory' },\n                    { ...groups.consumable, nestId: 'item_consumable' },\n                    { ...groups.treasure, nestId: 'item_treasure' }\n                ]\n            },\n            {\n                nestId: 'effect',\n                id: 'effect',\n                name: coreModule.api.Utils.i18n('Effect'),\n                groups: [\n                    { ...groups.temporaryEffect, nestId: 'effect_temporary' },\n                    { ...groups.passiveEffect, nestId: 'effect_passive' },\n                    { ...groups.inactiveEffect, nestId: 'effect_inactive' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' },\n                    { ...groups.downtime, nestId: 'utility_downtime' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","// import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n    // game.settings.register(MODULE.ID, 'displayUnequipped', {\n    //     name: game.i18n.localize('tokenActionHud.fu.settings.displayUnequipped.name'),\n    //     hint: game.i18n.localize('tokenActionHud.fu.settings.displayUnequipped.hint'\n    //     ),\n    //     scope: 'client',\n    //     config: true,\n    //     type: Boolean,\n    //     default: true,\n    //     onChange: (value) => {\n    //         coreUpdate(value)\n    //     }\n    // })\n}\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n     */\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n        /**\n         * Handle action click\n         * Called by Token Action HUD Core when an action is left or right-clicked\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionClick (event, encodedValue) {\n            const [actionTypeId, actionId] = encodedValue.split('|')\n            const isShift = this.isShift\n\n            const renderable = ['item']\n\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n                return this.renderItem(this.actor, actionId)\n            }\n\n            const knownCharacters = ['character']\n\n            // If single actor is selected\n            if (this.actor) {\n                await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId, isShift)\n                return\n            }\n\n            const controlledTokens = canvas.tokens.controlled\n                .filter((token) => knownCharacters.includes(token.actor?.type))\n\n            // If multiple actors are selected\n            for (const token of controlledTokens) {\n                const actor = token.actor\n                await this.#handleAction(event, actor, token, actionTypeId, actionId, isShift)\n            }\n        }\n\n        /**\n         * Handle action hover\n         * Called by Token Action HUD Core when an action is hovered on or off\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionHover (event, encodedValue) {}\n\n        /**\n         * Handle group click\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n         * @override\n         * @param {object} event The event\n         * @param {object} group The group\n         */\n        async handleGroupClick (event, group) {}\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event        The event\n         * @param {object} actor        The actor\n         * @param {object} token        The token\n         * @param {string} actionTypeId The action type id\n         * @param {string} actionId     The actionId\n         */\n        async #handleAction (event, actor, token, actionTypeId, actionId, isShift) {\n            switch (actionTypeId) {\n            case 'item':\n                this.#handleItemAction(event, actor, actionId)\n                break\n            case 'action':\n                this.#handleCombatAction(event, actor, actionId, isShift)\n                break\n            case 'effect':\n                this.#handleEffectAction(event, actor, actionId)\n                break\n            case 'utility':\n                this.#handleUtilityAction(event, actor, token, actionId)\n                break\n            }\n        }\n\n        /**\n         * Handles combat actions\n         *\n         * @private\n         * @param {Event} event     The event\n         * @param {Object} actor    The actor\n         * @param {string} actionId The action type id\n         * @param {boolean} isShift Whether Shift key was pressed\n         *\n         * @returns {Promise<void>}\n         */\n        async #handleCombatAction (event, actor, actionId, isShift) {\n            const combatActionHandler = new game.projectfu.ActionHandler(actor)\n\n            switch (actionId) {\n            case 'equipmentAction':\n                await combatActionHandler.handleAction('equipment', isShift)\n                break\n            case 'guardAction':\n                await combatActionHandler.handleAction('guard', isShift)\n                break\n            case 'hinderAction':\n                await combatActionHandler.handleAction('hinder', isShift)\n                break\n            case 'inventoryAction':\n                await combatActionHandler.handleAction('inventory', isShift)\n                break\n            case 'objectiveAction':\n                await combatActionHandler.handleAction('objective', isShift)\n                break\n            case 'spellAction':\n                await combatActionHandler.handleAction('spell', isShift)\n                break\n            case 'studyAction':\n                await combatActionHandler.handleAction('study', isShift)\n                break\n            case 'skillAction':\n                await combatActionHandler.handleAction('skill', isShift)\n                break\n            case 'attributeCheck':\n                Hooks.call('promptAttributeCheckCalled', actor)\n                break\n            case 'openCheck':\n                Hooks.call('promptOpenCheckCalled', actor)\n                break\n            case 'groupCheck':\n                Hooks.call('promptGroupCheckCalled', actor)\n                break\n            case 'initiativeCheck':\n                Hooks.call('promptInitiativeCheckCalled', actor)\n                break\n            case 'travelCheck':\n                console.warn('Not yet implemented')\n                // game.lookfar.showTravelCheckDialog()\n                break\n            default:\n                console.warn(`Unknown action ID: ${actionId}`)\n                break\n            }\n        }\n\n        /**\n         * @typedef KeyboardModifiers\n         * @property {boolean} shift\n         * @property {boolean} alt\n         * @property {boolean} ctrl\n         * @property {boolean} meta\n         */\n\n        /**\n         * Handle item action\n         * @private\n         * @param {Event} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleItemAction (event, actor, actionId) {\n            const item = actor.items.get(actionId)\n            /** @type KeyboardModifiers **/\n            const modifiers = {\n                shift: event.shiftKey,\n                ctrl: event.ctrlKey\n            }\n            item.roll(modifiers)\n        }\n\n        /**\n         * @param {Event} event\n         * @param {Object} actor\n         * @param {String} effectId\n         */\n        #handleEffectAction (event, actor, effectId) {\n            const isRightClick = event.type === 'contextmenu'\n            const effect = Array.from(actor.allEffects()).find((value) => value.id === effectId)\n            console.debug(`Handling click event for effect ${effectId} = ${effect.name}; RightClick: ${isRightClick}`)\n            const canBeManaged = !effect.statuses.has('crisis') && !effect.statuses.has('ko')\n            if (isRightClick && canBeManaged) {\n                // Don't allow deleting temporary effects from skills\n                const isTemporary = effect.isTemporary && effect.parent.type !== 'skill'\n                // Remove\n                if (isTemporary) {\n                    effect.delete()\n                    this.#onUpdate()\n                } else {\n                    // Toggle the effect\n                    effect.update({ disabled: !effect.disabled })\n                    this.#onUpdate()\n                }\n            } else {\n                // this.renderItem(actor, effectId)\n            }\n        }\n\n        /**\n         * Handle utility action\n         * @private\n         * @param {Event} event\n         * @param {Object} actor\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #handleUtilityAction (event, actor, token, actionId) {\n            switch (actionId) {\n            case 'rest':\n                // Really\n                actor.rest()\n                break\n            }\n        }\n\n        /**\n         * @description Forces an update of the HUD\n         */\n        #onUpdate () {\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n    }\n})\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler () {\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Fabula Ultima'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}              The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults () {\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        // registerStyles () {\n        //     return {\n        //         template: {\n        //             class: 'tah-style-fu-style', // The class to add to first DIV element\n        //             file: 'tah-fu-style', // The file without the css extension\n        //             moduleId: MODULE.ID, // The module ID\n        //             name: 'PFU Style' // The name to display in the Token Action HUD Core 'Style' module setting\n        //         }\n        //     }\n        // }\n    }\n})\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","basic","weapon","shield","armor","accessory","consumable","treasure","class","skill","heroic","spell","miscAbility","rule","behavior","ritual","project","classFeature","optionalFeature","effect","action","attack","equipment","guard","inventory","hinder","objective","study","check","travel","utility","GROUP","equipped","id","name","type","combat","token","temporaryEffect","passiveEffect","inactiveEffect","downtime","ITEM_TYPE","groupId","ActionHandler","Hooks","once","async","coreModule","api","this","actorType","actor","items","Utils","sortItemsByName","effects","buildCharacterActions","buildNPCActions","buildMultipleTokenActions","buildCheckActions","buildCombatActions","buildItems","buildEffects","buildDowntimeActions","actionTypeId","actions","map","i18n","listName","encodedValue","join","delimiter","checkGroupData","addActions","combatGroupData","travelAction","travelGroupData","typeId","getAction","img","getImage","addEffectGroup","groupData","effectCategories","temporaryEffects","temporary","passiveEffects","passive","inactiveEffects","inactive","restAction","size","inventoryMap","Map","slots","equippedItemIds","Set","slot","equippedItemId","system","add","itemId","itemData","typeMap","get","set","description","actionTypeName","equippedActions","filter","has","DEFAULTS","register","coreUpdate","groups","Object","values","forEach","group","game","localize","groupsArray","console","info","layout","nestId","rests","RollHandler","event","actionId","split","isShift","includes","isRenderItem","renderItem","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","handleItemAction","handleCombatAction","handleEffectAction","handleUtilityAction","combatActionHandler","projectfu","call","warn","item","modifiers","shift","shiftKey","ctrl","ctrlKey","roll","effectId","isRightClick","Array","from","allEffects","find","value","debug","canBeManaged","statuses","isTemporary","parent","delete","onUpdate","update","disabled","rest","callAll","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","static","key","defaultValue","settings","Logger"],"mappings":"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"}