const e={ID:"token-action-hud-fu"},t={ID:"token-action-hud-core"},i="2.0",s={basic:"TYPES.Item.basic",weapon:"TYPES.Item.weapon",shield:"TYPES.Item.shield",armor:"TYPES.Item.armor",accessory:"TYPES.Item.accessory",consumable:"TYPES.Item.consumable",treasure:"TYPES.Item.treasure",class:"TYPES.Item.class",skill:"TYPES.Item.skill",heroic:"TYPES.Item.heroic",spell:"TYPES.Item.spell",miscAbility:"TYPES.Item.miscAbility",rule:"TYPES.Item.rule",behavior:"TYPES.Item.behavior",ritual:"TYPES.Item.ritual",project:"TYPES.Item.project",classFeature:"TYPES.Item.classFeature",optionalFeature:"TYPES.Item.optionalFeature",effect:"TYPES.Item.effect",action:"FU.Action",attack:"FU.Attack",equipment:"FU.Equipment",guard:"FU.Guard",inventory:"FU.Inventory",hinder:"FU.Hinder",objective:"FU.Objective",study:"FU.Study",check:"tokenActionHud.fu.check.label",travel:"tokenActionHud.fu.check.travelcheck",utility:"tokenActionHud.utility"},a={equipped:{id:"equipped",name:"tokenActionHud.fu.equipped.label",type:"system"},basic:{id:"basic",name:"TYPES.Item.basic",type:"system"},weapon:{id:"weapon",name:"TYPES.Item.weapon",type:"system"},shield:{id:"shield",name:"TYPES.Item.shield",type:"system"},armor:{id:"armor",name:"TYPES.Item.armor",type:"system"},accessory:{id:"accessory",name:"TYPES.Item.accessory",type:"system"},consumable:{id:"consumable",name:"TYPES.Item.consumable",type:"system"},treasure:{id:"treasure",name:"TYPES.Item.treasure",type:"system"},class:{id:"class",name:"TYPES.Item.class",type:"system"},skill:{id:"skill",name:"TYPES.Item.skill",type:"system"},heroic:{id:"heroic",name:"TYPES.Item.heroic",type:"system"},miscAbility:{id:"miscAbility",name:"TYPES.Item.miscAbility",type:"system"},rule:{id:"rule",name:"TYPES.Item.rule",type:"system"},behavior:{id:"behavior",name:"TYPES.Item.behavior",type:"system"},spell:{id:"spell",name:"TYPES.Item.spell",type:"system"},ritual:{id:"ritual",name:"TYPES.Item.ritual",type:"system"},project:{id:"project",name:"TYPES.Item.project",type:"system"},classFeature:{id:"classFeature",name:"TYPES.Item.classFeature",type:"system"},optionalFeature:{id:"optionalFeature",name:"TYPES.Item.optionalFeature",type:"system"},effect:{id:"effect",name:"TYPES.Item.effect",type:"system"},check:{id:"check",name:"tokenActionHud.fu.check.label",type:"system"},action:{id:"action",name:"FU.Actions",type:"system"},attack:{id:"attack",name:"FU.attack",type:"system"},equipment:{id:"equipment",name:"FU.equipment",type:"system"},guard:{id:"guard",name:"FU.guard",type:"system"},inventory:{id:"inventory",name:"FU.inventory",type:"system"},hinder:{id:"hinder",name:"FU.hinder",type:"system"},objective:{id:"objective",name:"FU.objective",type:"system"},study:{id:"study",name:"FU.study",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"},temporaryEffect:{id:"temporaryEffect",name:"FU.TemporaryEffects",type:"system"},passiveEffect:{id:"passiveEffect",name:"FU.PassiveEffects",type:"system"},inactiveEffect:{id:"inactiveEffect",name:"FU.InactiveEffects",type:"system"},downtime:{id:"downtime",name:"FU.Downtime",type:"system"}},n={basic:{groupId:"basic"},weapon:{groupId:"weapon"},shield:{groupId:"shield"},armor:{groupId:"armor"},accessory:{groupId:"accessory"},consumable:{groupId:"consumable"},treasure:{groupId:"treasure"},class:{groupId:"class"},skill:{groupId:"skill"},heroic:{groupId:"heroic"},miscAbility:{groupId:"miscAbility"},rule:{groupId:"rule"},spell:{groupId:"spell"},ritual:{groupId:"ritual"},project:{groupId:"project"},classFeature:{groupId:"classFeature"},optionalFeature:{groupId:"optionalFeature"},effect:{groupId:"effect"}};let o=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{o=class ActionHandler extends e.api.ActionHandler{async buildSystemActions(){if(this.actorType=this.actor?.type,this.tooltipDirection=this.#e(),this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t,this.effects=this.actor.effects}"character"===this.actorType?this.#t():"npc"===this.actorType?this.#i():this.actor||this.#s()}#t(){this.#a(),this.#n(),this.#o(),this.#c(),this.#l()}#i(){this.#a(),this.#n(),this.#o(),this.#c()}#s(){}async#a(){const t="action",i=[{id:"attributeCheck",name:"Attribute Check"},{id:"openCheck",name:"Open Check"},{id:"groupCheck",name:"Group Check"},{id:"initiativeCheck",name:"Initiative Check"}].map((i=>({id:i.id,name:e.api.Utils.i18n(i.name),listName:i.name,encodedValue:[t,i.id].join(this.delimiter)}))),s={id:"check",type:"system"};this.addActions(i,s)}async#n(){const t="action",i=[{id:"guardAction",name:"Guard",rule:"FU.GuardRule"},{id:"equipmentAction",name:"Equipment",rule:"FU.EquipmentRule"},{id:"hinderAction",name:"Hinder",rule:"FU.HinderRule"},{id:"inventoryAction",name:"Inventory",rule:"FU.InventoryRule"},{id:"objectiveAction",name:"Objective",rule:"FU.ObjectiveRule"},{id:"spellAction",name:"Spell",rule:"FU.SpellRule"},{id:"studyAction",name:"Study",rule:"FU.StudyRule"},{id:"skillAction",name:"Skill",rule:"FU.SkillRule"}].map((i=>{const s={id:i.id,name:e.api.Utils.i18n(i.name),listName:i.name,encodedValue:[t,i.id].join(this.delimiter)};if(i.rule){const t=e.api.Utils.i18n(i.rule);t&&t!==i.rule&&(s.tooltip={content:`<h4>${s.name}</h4><p>${t}</p>`,class:"tah-system-tooltip",direction:this.tooltipDirection})}return s})),s={id:"action",type:"system"};this.addActions(i,s)}#e(){switch(game.settings.get("token-action-hud-core","direction")||"auto"){case"up":case"auto":default:return"DOWN";case"down":return"UP"}}#r(e,t,i){return`\n                <div class='tah-tooltip-header'>\n                    <h4>${e}</h4>\n                    <span class='tah-item-badge'>${i.type.charAt(0).toUpperCase()+i.type.slice(1)}</span>\n                </div>\n                <div class='tah-tooltip-body'>\n                    ${this.#d(i)}\n                    ${t?`<p>${t}</p>`:""}\n                    <div class='tah-tooltip-hint'><em>Left-click to use ◆ Right-click for sheet</em></div>\n                </div>\n            `}#d(e){const t=[],{system:i,type:s}=e;if(!i)return"";if("spell"===s&&i.rollInfo){const e=i.rollInfo.accuracy?.value;if(void 0!==e){const s=i.rollInfo.attributes?.primary?.value||"DEX",a=i.rollInfo.attributes?.secondary?.value||"INS";t.push(`<strong>Accuracy:</strong> 【${s.toUpperCase()} + ${a.toUpperCase()}】+${e}`)}if(i.rollInfo.damage?.hasDamage?.value){const e=i.rollInfo.damage.value||0,s=i.rollInfo.damage.type.value||"Physical";t.push(`<strong>Damage:</strong> 【HR + ${e}】 ${s}`)}}if(("weapon"===s||"basic"===s)&&i.damage){const e=i.accuracy?.value;if(void 0!==e){const s=i.attributes?.primary?.value||"MIG",a=i.attributes?.secondary?.value||"MIG";t.push(`<strong>Accuracy:</strong> 【${s.toUpperCase()} + ${a.toUpperCase()}】+${e}`)}const s=i.damage.value||0,a=i.type?.value||"Physical";t.push(`<strong>Damage:</strong> 【HR + ${s}】 ${a}`)}return t.length>0?t.map((e=>`<div class='tah-item-stats'>${e}</div>`)).join(""):""}async#c(){const t="effect",getAction=i=>{const s={id:i.id,name:e.api.Utils.i18n(i.name),listName:i.name,img:e.api.Utils.getImage(i),encodedValue:[t,i.id].join(this.delimiter)};return i.description&&(s.tooltip={content:`<h4>${i.name}</h4><p>${i.description}</p>`,class:"tah-system-tooltip",direction:this.#e()}),s},addEffectGroup=(e,t)=>{const i={id:t,type:"system"};this.addActions(e,i)},i=this.actor.effectCategories,s=i.temporary.effects.map(getAction),a=i.passive.effects.map(getAction),n=i.inactive.effects.map(getAction);addEffectGroup(s,"temporaryEffect"),addEffectGroup(a,"passiveEffect"),addEffectGroup(n,"inactiveEffect")}async#l(){const t={id:"rest",name:e.api.Utils.i18n("Rest"),listName:"Rest",encodedValue:["utility","rest"].join(this.delimiter)},i={id:"downtime",type:"system"};this.addActions([t],i)}async#o(){if(0===this.items.size)return;const t="item",i=new Map,a=["mainHand","offHand","phantom","armor","accessory","arcanum"],o=new Set;for(const e of a){const t=this.actor.system.equipped[e];t&&o.add(t)}for(const[e,t]of this.items){if("weapon"===t.type&&"npc"===this.actorType)continue;const s=i.get(t.type)??new Map;s.set(e,t),i.set(t.type,s)}for(const[a,o]of i){const i=n[a]?.groupId;if(!i)continue;const c={id:i,type:"system"},l=[...o].map((([i,a])=>{const n=i,o=a.name,c=a.system.description||"",l=e.api.Utils.i18n(s[t]),r=`${l?`${l}: `:""}${o}<br>${c}`,d=[t,n].join(this.delimiter),m={id:n,name:o,listName:r,img:e.api.Utils.getImage(a),encodedValue:d};return m.tooltip={content:this.#r(o,c,a),class:"tah-system-tooltip",direction:this.tooltipDirection},m}));this.addActions(l,c)}const c=[...this.items].filter((([e])=>o.has(e))).map((([i,a])=>{const n=i,o=a.name,c=a.system.description||"",l=e.api.Utils.i18n(s[t]),r=`${l?`${l}: `:""}${o}<br>${c}`,d=[t,n].join(this.delimiter),m={id:n,name:o,listName:r,img:e.api.Utils.getImage(a),encodedValue:d};return m.tooltip={content:this.#r(o,c,a),class:"tah-system-tooltip",direction:this.tooltipDirection},m}));this.addActions(c,{id:"equipped",type:"system"})}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=a;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`${game.i18n.localize("tokenActionHud.fu.group")}: ${e.api.Utils.i18n(t.listName??t.name)}`}));const i=Object.values(t);console.info("Initializing token action hud layout for FU"),c={layout:[{nestId:"attack",id:"attack",name:e.api.Utils.i18n("Attack"),groups:[{...t.basic,nestId:"attack_basic"},{...t.weapon,nestId:"attack_weapon"}]},{nestId:"feature",id:"feature",name:e.api.Utils.i18n("Skill"),groups:[{...t.skill,nestId:"feature_skill"},{...t.miscAbility,nestId:"feature_miscAbility"},{...t.classFeature,nestId:"feature_classFeature"},{...t.optionalFeature,nestId:"feature_optionalFeature"}]},{nestId:"spell",id:"spell",name:e.api.Utils.i18n("Spell"),groups:[{...t.spell,nestId:"spell_spell"}]},{nestId:"item",id:"item",name:e.api.Utils.i18n("Items"),groups:[{...t.consumable,nestId:"item_consumable"},{...t.equipped,nestId:"item_equipped"}]},{nestId:"action",id:"action",name:e.api.Utils.i18n("Action"),groups:[{...t.action,nestId:"action_action"}]}],groups:i}}));let l=null;function register(e){}Hooks.once("tokenActionHudCoreApiReady",(async e=>{l=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const[i,s]=t.split("|"),a=this.isShift;if(["item"].includes(i)&&this.isRenderItem())return this.renderItem(this.actor,s);const n=["character"];if(this.actor)return void await this.#m(e,this.actor,this.token,i,s,a);const o=canvas.tokens.controlled.filter((e=>n.includes(e.actor?.type)));for(const t of o){const n=t.actor;await this.#m(e,n,t,i,s,a)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#m(e,t,i,s,a,n){switch(s){case"item":this.#p(e,t,a);break;case"action":this.#u(e,t,a,n);break;case"effect":this.#y(e,t,a);break;case"utility":this.#h(e,t,i,a)}}async#u(e,t,i,s){const a=new game.projectfu.ActionHandler(t);switch(i){case"equipmentAction":await a.handleAction("equipment",s);break;case"guardAction":await a.handleAction("guard",s);break;case"hinderAction":await a.handleAction("hinder",s);break;case"inventoryAction":await a.handleAction("inventory",s);break;case"objectiveAction":await a.handleAction("objective",s);break;case"spellAction":await a.handleAction("spell",s);break;case"studyAction":await a.handleAction("study",s);break;case"skillAction":await a.handleAction("skill",s);break;case"attributeCheck":Hooks.call("promptAttributeCheckCalled",t);break;case"openCheck":Hooks.call("promptOpenCheckCalled",t);break;case"groupCheck":Hooks.call("promptGroupCheckCalled",t);break;case"initiativeCheck":Hooks.call("promptInitiativeCheckCalled",t);break;default:console.warn(`Unknown action ID: ${i}`)}}#p(e,t,i){const s=t.items.get(i),a={shift:e.shiftKey,ctrl:e.ctrlKey};s.roll(a)}#y(e,t,i){const s="contextmenu"===e.type,a=Array.from(t.allEffects()).find((e=>e.id===i));console.debug(`Handling click event for effect ${i} = ${a.name}; RightClick: ${s}`);const n=!a.statuses.has("crisis")&&!a.statuses.has("ko");if(s&&n){a.isTemporary&&"skill"!==a.parent.type?(a.delete(),this.#f()):(a.update({disabled:!a.disabled}),this.#f())}}async#h(e,t,i,s){if("rest"===s)t.rest()}#f(){Hooks.callAll("forceUpdateTokenActionHud")}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class SystemManager extends t.api.SystemManager{getActionHandler(){return new o}getAvailableRollHandlers(){return{core:"Fabula Ultima"}}getRollHandler(e){let t;return t=new l,t}async registerDefaults(){return c}registerSettings(e){}registerStyles(){return{fuPixel:{class:"tah-style-pixel-style",file:"tah-fu-pixel",moduleId:e.ID,name:"Pixel Style"}}}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class Utils{static getSetting(i,s=null){let a=s??null;try{a=game.settings.get(e.ID,i)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}return a}static async setSetting(i,s){try{s=await game.settings.set(e.ID,i,s),t.api.Logger.debug(`Setting '${i}' set to '${s}'`)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}}}}));export{s as ACTION_TYPE,o as ActionHandler,t as CORE_MODULE,c as DEFAULTS,a as GROUP,n as ITEM_TYPE,e as MODULE,i as REQUIRED_CORE_MODULE_VERSION,l as RollHandler,r as SystemManager,d as Utils,register};
//# sourceMappingURL=token-action-hud-fu.min.js.map
