!function(t,e){t&&!t.getElementById("livereloadscript")&&((e=t.createElement("script")).async=1,e.src="//"+(self.location.host||"localhost").split(":")[0]+":9999/livereload.js?snipver=1",e.id="livereloadscript",t.getElementsByTagName("head")[0].appendChild(e))}(self.document);const t="token-action-hud-fu",e={attack:"tokenActionHud.attack",equipment:"tokenActionHud.equipment",guard:"tokenActionHud.guard",utility:"tokenActionHud.utility"},i={mainSlot:{id:"mainSlot",name:"tokenActionHud.fu.attack.mainSlot",type:"system"},offSlot:{id:"offSlot",name:"tokenActionHud.fu.attack.offSlot",type:"system"},armorSlot:{id:"armorSlot",name:"tokenActionHud.fu.attack.armorSlot",type:"system"},accessorySlot:{id:"accessorySlot",name:"tokenActionHud.fu.attack.accessorySlot",type:"system"},weapons:{id:"weapons",name:"tokenActionHud.fu.equipment.weapons",type:"system"},shields:{id:"shields",name:"tokenActionHud.fu.equipment.shields",type:"system"},armor:{id:"armor",name:"tokenActionHud.fu.equipment.armor",type:"system"},accessories:{id:"accessories",name:"tokenActionHud.fu.equipment.accessories",type:"system"},spells:{id:"spells",name:"tokenActionHud.fu.spells.label",type:"system"},miscAbility:{id:"abilities",name:"tokenActionHud.fu.abilities.label",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},n={weapon:{groupId:"weapons"},shield:{groupId:"shields"},armor:{groupId:"armor"},accessory:{groupId:"accessories"},consumable:{groupId:"consumables"},treasure:{groupId:"treasures"},spell:{groupId:"spells"},miscAbility:{groupId:"abilities"}},s={mainSlot:{groupId:"mainSlot"},offSlot:{groupId:"offSlot"},armorSlot:{groupId:"armorSlot"},accessorySlot:{groupId:"accessorySlot"}};let o=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{o=class Utils{static getSetting(i,n=null){let s=n??null;try{s=game.settings.get(t,i)}catch{e.api.Logger.debug(`Setting '${i}' not found`)}return s}static async setSetting(i,n){try{n=await game.settings.set(t,i,n),e.api.Logger.debug(`Setting '${i}' set to '${n}'`)}catch{e.api.Logger.debug(`Setting '${i}' not found`)}}}}));let a=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{a=class ActionHandler extends t.api.ActionHandler{a;async buildSystemActions(e){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=o.getSetting("displayUnequipped"),this.actor){let e=this.actor.items;e=t.api.Utils.sortItemsByName(e),this.items=e}"character"===this.actorType?this.#t():"npc"===this.actorType?this.#e():this.actor||this.#i()}#t(){this.#n(),this.#s(),this.#o(),this.#a()}#e(){}#i(){}handleTravelActionClick(){showTravelCheckDialog()}async#s(){if(0===this.items.size)return;const i="equipment",s=new Map;for(const[t,e]of this.items){const i=e.type;if(e.isEquipped||this.displayUnequipped){const n=s.get(i)??new Map;n.set(t,e),s.set(i,n)}}for(const[o,a]of s){const s=n[o]?.groupId;if(!s)continue;const l={id:s,type:"system"},c=[...a].map((([n,s])=>{const o=n,a=s.name,l=t.api.Utils.i18n(e[i]),c=`${l?`${l}: `:""}${a}`,r=[i,o].join(this.delimiter);return{id:o,name:a,listName:c,encodedValue:r}}));this.addActions(c,l)}}async#o(){if(0===this.items.size)return;const i="spell",s=new Map;for(const[t,e]of this.items){const i=e.type;if(e.isEquipped||this.displayUnequipped){const n=s.get(i)??new Map;n.set(t,e),s.set(i,n)}}for(const[o,a]of s){const s=n[o]?.groupId;if(!s)continue;const l={id:s,type:"system"},c=[...a].map((([n,s])=>{const o=n,a=s.name,l=t.api.Utils.i18n(e[i]),c=`${l?`${l}: `:""}${a}`,r=[i,o].join(this.delimiter);return{id:o,name:a,listName:c,encodedValue:r}}));this.addActions(c,l)}}async#a(){const t=n.travel?.groupId;if(!t)return;const e={id:t,type:"system"},i=[{id:"travel",name:"Travel",listName:"Travel",encodedValue:["travel","travel"].join(this.delimiter)}];this.addActions(i,e),$(`#${e.id}`).click((t=>{t.preventDefault(),this.handleTravelActionClick()}))}async#n(){if(0===this.items.size)return;const i="attack",n=new Map;for(const[t,e]of this.items){const i=e.type;if(e.isEquipped||this.displayUnequipped){const s=n.get(i)??new Map;s.set(t,e),n.set(i,s)}}for(const[s,o]of n){const n=SLOT_TYPE[s]?.groupId;if(!n)continue;const a={id:n,type:"system"},l=[...o].map((([n,s])=>{const o=n,a=s.name,l=t.api.Utils.i18n(e[i]),c=`${l?`${l}: `:""}${a}`,r=[i,o].join(this.delimiter);return{id:o,name:a,listName:c,encodedValue:r}}));this.addActions(l,a)}}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=i;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const n=Object.values(e);l={layout:[{nestId:"attack",id:"attack",name:t.api.Utils.i18n("Attack"),groups:[{...e.mainSlot,nestId:"attack_mainSlot"},{...e.offSlot,nestId:"attack_offSlot"},{...e.armorSlot,nestId:"attack_armorSlot"},{...e.accessorySlot,nestId:"attack_accessorySlot"}]},{nestId:"equipment",id:"equipment",name:t.api.Utils.i18n("Equipment"),groups:[{...e.weapons,nestId:"equipment_weapons"},{...e.shields,nestId:"equipment_shields"},{...e.armor,nestId:"equipment_armor"},{...e.accessories,nestId:"equipment_accessories"}]},{nestId:"guard",id:"guard",name:t.api.Utils.i18n("Guard"),groups:[{...e.weapons,nestId:"equipment_weapons"}]},{nestId:"spell",id:"spell",name:t.api.Utils.i18n("Spell"),groups:[{...e.spells,nestId:"spell_name"}]},{nestId:"travel",id:"travel",name:t.api.Utils.i18n("Travel"),groups:[{...e.travels,nestId:"travel_name"}]},{nestId:"utility",id:"utility",name:t.api.Utils.i18n("tokenActionHud.utility"),groups:[{...e.combat,nestId:"utility_combat"},{...e.token,nestId:"utility_token"},{...e.rests,nestId:"utility_rests"},{...e.utility,nestId:"utility_utility"}]}],groups:n}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{c=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const[i,n]=e.split("|");if(["item"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,n);const s=["character"];if(this.actor)return void await this.#l(t,this.actor,this.token,i,n);const o=canvas.tokens.controlled.filter((t=>s.includes(t.actor?.type)));for(const e of o){const s=e.actor;await this.#l(t,s,e,i,n)}}async handleActionHover(t,e){}async handleGroupClick(t,e){}async#l(t,e,i,n,s){switch(n){case"item":this.#c(t,e,s);break;case"utility":this.#r(i,s)}}#c(t,e,i){e.items.get(i).toChat(t)}async#r(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let r=null;var d,u;Hooks.once("tokenActionHudCoreApiReady",(async e=>{r=class SystemManager extends e.api.SystemManager{getActionHandler(){return new a}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(t){let e;return e=new c,e}async registerDefaults(){return l}registerSettings(e){!function register$1(e){game.settings.register(t,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.fu.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.fu.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}(e)}registerStyles(){return{template:{class:"tah-style-fu-style",file:"tah-fu",moduleId:t,name:"Fabula Ultima Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t);e.api={requiredCoreModuleVersion:"1.5",SystemManager:r},Hooks.call("tokenActionHudSystemReady",e)})),(d=self.document)&&!d.getElementById("livereloadscript")&&((u=d.createElement("script")).async=1,u.src="//"+(self.location.host||"localhost").split(":")[0]+":9999/livereload.js?snipver=1",u.id="livereloadscript",d.getElementsByTagName("head")[0].appendChild(u));const p="token-action-hud-fu",m={item:"tokenActionHud.fu.item",utility:"tokenActionHud.utility"},y={armor:{id:"armor",name:"tokenActionHud.fu.armor",type:"system"},equipment:{id:"equipment",name:"tokenActionHud.fu.equipment",type:"system"},consumables:{id:"consumables",name:"tokenActionHud.fu.consumables",type:"system"},containers:{id:"containers",name:"tokenActionHud.fu.containers",type:"system"},treasure:{id:"treasure",name:"tokenActionHud.fu.treasure",type:"system"},weapons:{id:"weapons",name:"tokenActionHud.fu.weapons",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},g={armor:{groupId:"armor"},backpack:{groupId:"containers"},consumable:{groupId:"consumables"},equipment:{groupId:"equipment"},treasure:{groupId:"treasure"},weapon:{groupId:"weapons"}};let h=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{h=class Utils{static getSetting(e,i=null){let n=i??null;try{n=game.settings.get(p,e)}catch{t.api.Logger.debug(`Setting '${e}' not found`)}return n}static async setSetting(e,i){try{i=await game.settings.set(p,e,i),t.api.Logger.debug(`Setting '${e}' set to '${i}'`)}catch{t.api.Logger.debug(`Setting '${e}' not found`)}}}}));let k=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{k=class ActionHandler extends t.api.ActionHandler{a;async buildSystemActions(t){this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=h.getSetting("displayUnequipped"),this.actor,"character"===this.actorType?this.#d():"npc"===this.actorType?this.#u():this.actor||this.#p()}#d(){this.#m()}#u(){this.#m()}#p(){}async#m(){if(0===this.items.size)return;const e="item",i=new Map;for(const[t,e]of this.items){const n=e.type;if(e.equipped||this.displayUnequipped){const s=i.get(n)??new Map;s.set(t,e),i.set(n,s)}}for(const[n,s]of i){const i=g[n]?.groupId;if(!i)continue;const o={id:i,type:"system"},a=[...s].map((([i,n])=>{const s=i,o=n.name,a=t.api.Utils.i18n(m[e]),l=`${a?`${a}: `:""}${o}`,c=[e,s].join(this.delimiter);return{id:s,name:o,listName:l,encodedValue:c}}));this.addActions(a,o)}}}}));let f=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=y;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const i=Object.values(e);f={layout:[{nestId:"inventory",id:"inventory",name:t.api.Utils.i18n("Template.Inventory"),groups:[{...e.weapons,nestId:"inventory_weapons"},{...e.armor,nestId:"inventory_armor"},{...e.equipment,nestId:"inventory_equipment"},{...e.consumables,nestId:"inventory_consumables"},{...e.containers,nestId:"inventory_containers"},{...e.treasure,nestId:"inventory_treasure"}]},{nestId:"utility",id:"utility",name:t.api.Utils.i18n("tokenActionHud.utility"),groups:[{...e.combat,nestId:"utility_combat"},{...e.token,nestId:"utility_token"},{...e.rests,nestId:"utility_rests"},{...e.utility,nestId:"utility_utility"}]}],groups:i}}));let A=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{A=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const[i,n]=e.split("|");if(["item"].includes(i)&&this.isRenderItem())return this.doRenderItem(this.actor,n);const s=["character"];if(this.actor)return void await this.#y(t,this.actor,this.token,i,n);const o=canvas.tokens.controlled.filter((t=>s.includes(t.actor?.type)));for(const e of o){const s=e.actor;await this.#y(t,s,e,i,n)}}async handleActionHover(t,e){}async handleGroupClick(t,e){}async#y(t,e,i,n,s){switch(n){case"item":this.#g(t,e,s);break;case"utility":this.#h(i,s)}}#g(t,e,i){e.items.get(i).toChat(t)}async#h(t,e){"endTurn"===e&&game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let H=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{H=class SystemManager extends t.api.SystemManager{getActionHandler(){return new k}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(t){let e;return e=new A,e}async registerDefaults(){return f}registerSettings(t){!function register(t){game.settings.register(p,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.fu.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.fu.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}(t)}registerStyles(){return{template:{class:"tah-style-template-style",file:"tah-template-style",moduleId:p,name:"Template Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(p);t.api={requiredCoreModuleVersion:"1.5",SystemManager:H},Hooks.call("tokenActionHudSystemReady",t)}));export{s as SLOT_TYPE};
